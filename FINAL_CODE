{"cells":[{"cell_type":"markdown","metadata":{"id":"W5eA6bFL0n4y"},"source":["# For Bike (Petrol) Imformation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cDi0ghgyqaaD"},"outputs":[],"source":["# To Extract the bike Imformation\n","\n","\n","def recommendation_petrol(company,bike_name,category):                          # To provide the recommendation for the user based on ratings\n","\n","  import pandas as pd\n","  import numpy as np\n","  import warnings\n","  warnings.filterwarnings('ignore')\n","  from sklearn.metrics import pairwise_distances\n","  data=pd.read_excel('/content/drive/MyDrive/MINI/Dataset/Modified_company_name.xlsx')\n","  data.drop('Unnamed: 0',axis=1,inplace=True)\n","  #data.head(2)\n","  #category='Scooter'\n","  category_group=data.groupby('Category')\n","  scooter_df=category_group.get_group(category)\n","  scooter_df.reset_index(inplace=True)\n","  scooter_df.rename(columns={'index':'id','company model name':'name'},inplace =True)\n","\n","  #scooter_df.info()\n","  # find the similarity matrix\n","\n","  rating_matrix = scooter_df.pivot_table(index='year', columns='name', values='ratings')\n","  rating_matrix.fillna(0,inplace=True)\n","\n","  similarity_matrix = 1 - pairwise_distances(rating_matrix.T.values, metric='correlation')\n","  similarity_df = pd.DataFrame(similarity_matrix, index=rating_matrix.columns, columns=rating_matrix.columns)\n","\n","  similarity_df.head(2)\n","\n","  def get_similar_vehicle(title, similarity_df, scooter_df, topn=5):\n","      if title in similarity_df.columns:\n","          top_movies = similarity_df[title].sort_values(ascending=False)[0:topn]\n","          top_movies_df = pd.DataFrame({'title': top_movies.index, 'similarity': top_movies.values})\n","\n","\n","          top_movies_df = pd.merge(top_movies_df, scooter_df[['name', 'ratings']], left_on='title', right_on='name')\n","          top_movies_df.drop('name', axis=1, inplace=True)\n","          top_movies_df.drop('similarity', axis=1, inplace=True)\n","\n","          top_movies_df=top_movies_df.drop_duplicates(subset=['title'])\n","          top_movies_df.reset_index(inplace=True)\n","          top_movies_df.drop('index',axis=True,inplace=True)\n","\n","          return top_movies_df\n","      else:\n","          return \"Entered vehicle is not there !!!\"\n","\n","\n","  #company='Honda'\n","  #bike_name='shine'\n","  check=company + \" \"+bike_name\n","\n","  import re\n","  def clean_and_compare(string1, string2):\n","      clean_string1 = re.sub(r'[^a-zA-Z0-9]', '', string1).lower()\n","      clean_string2 = re.sub(r'[^a-zA-Z0-9]', '', string2).lower()\n","      return clean_string2 in clean_string1\n","\n","\n","  dataset = scooter_df['name']\n","\n","  search_string = check\n","\n","  for data in dataset:\n","      if clean_and_compare(data, search_string):\n","          vehicle_name=data\n","          break\n","  else:\n","      print(\"Not found\")\n","      exit(0)\n","\n","\n","\n","  movies_heat = get_similar_vehicle(vehicle_name, similarity_df, scooter_df)\n","  print(f\"Similar vehicle to {vehicle_name}  :\\n\", movies_heat)\n","'''\n","company='bajaj'\n","bike_name='pulsar-150'\n","category='Streetfighter'\n","recommendation(company,bike_name,category)\n","'''\n","\n","\n","# original code\n","def bike_imformation():\n","  try:\n","    company=str(input('enter the company name: '))\n","    print(\"Enter the category of your bike:\")\n","\n","    print(\"1. Commuter\")\n","    print(\"2. Scooter\")\n","    print(\"3. Sports bike\")\n","    print(\"4. Naked bike\")\n","    print(\"5. Scrambler\")\n","    print(\"6. Street fighter\")\n","    print(\"7. Cruiser\")\n","    print(\"8. Dual sport\")\n","    print(\"9. Touring Motorcycle\")\n","\n","    user_input = input(\"Enter the number corresponding to your choice: \")\n","    choice = int(user_input)\n","    categories = {\n","        1: \"Commuter\",\n","        2: \"Scooter\",\n","        3: \"Sports Bike\",\n","        4: \"Naked Bike\",\n","        5: \"Scrambler\",\n","        6: \"Streetfighter\",\n","        7: \"Cruiser\",\n","        8: \"Dual Sport\",\n","        9: \"Touring Motorcycle\"\n","    }\n","\n","    if choice in categories:\n","        category = categories[choice]\n","        print(f\"You selected: {category}\")\n","    else:\n","        print(\"Invalid choice. Please enter a number between 1 and 6.\")\n","\n","\n","    bike_name=str(input('Enter the Bike name: '))\n","\n","    import requests\n","    from bs4 import BeautifulSoup\n","\n","    '''\n","    url = \"https://www.bikewale.com/\"\n","\n","    print('#########################################################################')\n","\n","    comp = company.replace(\" \", \"%20\")\n","    bikename = bike_name.replace(\" \", \"%20\")\n","\n","\n","    url= url + comp + '-bikes/' + bikename+'/'\n","    print()\n","    print('url=',url)\n","    '''\n","    ########################################## google search ##################\n","    from googlesearch import search\n","    query=company + bike_name + \"in bikewale\"\n","    l=[]\n","    for q in search(query,stop=1):\n","      l.append(q)\n","    url=l[0]\n","    print(url)\n","    ##############################################################\n","    news_text=[]\n","    price=[]\n","\n","    # Web Scraping\n","    response = requests.get(url)\n","\n","    if response.status_code == 200:\n","\n","        soup = BeautifulSoup(response.text, 'html.parser')\n","\n","        news_elements = soup.find_all(class_='o-GFmfi o-bQXvsa o-cKSifp o-ItVGT o-cRSqer') # For news extraction\n","        price_elements=soup.find_all( class_ =\"o-dJmcbh o-fzoHBq o-fzoHMc o-fznVqX o-fznVsN\" )#o-dJmcbh o-fzoHBq o-fzoHMc o-fznVqX o-fznVsN\n","        for news_element in news_elements:\n","          news_text.append(news_element.get_text(strip=True))\n","        for price_element in price_elements:\n","          price.append(price_element.get_text(strip=True)) # Ex show room price\n","    else:\n","        print(f\"Failed to retrieve the page. Status code: {response.status_code}\")\n","\n","\n","    info_text = news_text[0]\n","\n","    # Split the information based on specific patterns\n","    split_info1 = info_text.split('Displacement')\n","    split_info2= info_text.split('Mileage - Owner Reported')\n","    split_info3= info_text.split('Riding Range')\n","    split_info4= info_text.split('Top Speed')\n","    split_info5= info_text.split('Fuel Tank Capacity')\n","    split_info6= info_text.split('Reserve Fuel Capacity')\n","    #split_info2= info_text.split('Fuel Tank Capacity')\n","\n","\n","    # Extract specific pieces of information\n","    displacement = split_info1[1].split(' ')[0].strip()\n","    milage = split_info2[1].split(' ')[0].strip()\n","    riding_range = split_info3[1].split(' ')[0].strip()\n","    top_speed = split_info4[1].split(' ')[0].strip()\n","    capacity_full= split_info5[1].split(' ')[0].strip()\n","    reserved= split_info6[1].split(' ')[0].strip()\n","    print()\n","    # Print the extracted information\n","    print(\"Extracted Information:\")\n","    print()\n","    print(f\"Displacement: {displacement} cc\")\n","    print(f\"Mileage - Owner Reported : {milage} km\")\n","    print(f\"Riding Range : {riding_range} km\")\n","    print(f\"Top Speed : {top_speed} km\")\n","    print(f\"Fuel Tank Capacity : {capacity_full} ltr\")\n","    print(f\"Reserve Fuel Capacity : {reserved} ltr\")\n","\n","\n","    ####################\n","    try:\n","      data_string=price[0]\n","\n","      data_string=data_string.split('.')\n","      split_data = [item.replace('VariantPriceSpecifications', '').replace('\\n', '').strip() for item in data_string if item]\n","      print()\n","      print(\"#########################################################################\")\n","      print(\"Price Imformation :\")\n","      print()\n","      print(split_data[0])\n","    except Exception as e :\n","      print(\"Sorry I am not able to fetch the result !!\")\n","\n","\n","\n","    print()\n","\n","    print(\"#########################################################################\")\n","    print(f\"Some News related to { company} {bike_name}:\")\n","\n","    print()\n","\n","    comp = company.replace(\" \", \"%20\")\n","    bikename = bike_name.replace(\" \", \"%20\")\n","\n","    url = \"https://www.rushlane.com/?s=\"\n","    url = url + comp + \"%20\" + bikename\n","    print(\"url=\",url)\n","    print()\n","\n","    import requests\n","    from bs4 import BeautifulSoup\n","\n","    response = requests.get(url)\n","\n","    if response.status_code == 200:\n","        soup = BeautifulSoup(response.text, 'html.parser')\n","        news_elements = soup.find_all(class_='entry-title td-module-title')\n","        #print(news_elements)\n","        for news_element in news_elements:\n","            news_text = news_element.get_text(strip=True)\n","            print(news_text)\n","            news_link = news_element.a.get('href','')\n","            print(news_link)\n","    else:\n","        print(f\"Failed to retrieve the page. Status code: {response.status_code}\")\n","\n","\n","\n","    print('#######################################################################')\n","    print()\n","    print(\"Recommendations For You\")\n","    print()\n","    recommendation_petrol(company,bike_name,category)\n","  except Exception as e:\n","    print()\n","    print(\"Your data contains errors; please review and correct. \",e)\n","    print()\n","    re = str(input(\"Do you want to Continue? (y/n) : \"))\n","    if re =='y':\n","      bike_imformation()\n","\n","    #ev_imformation()\n","\n","#bike_imformation()"]},{"cell_type":"markdown","metadata":{"id":"HpEZuAvm022y"},"source":["# For Electric vehicles"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IBM73Lbc0taD"},"outputs":[],"source":["# To Extract the imformation related to electric vehicles\n","\n","# For recommendation\n","def recommendation(bike_name):\n","\n","  import pandas as pd\n","  import numpy as np\n","  import warnings\n","  warnings.filterwarnings('ignore')\n","  from sklearn.metrics import pairwise_distances\n","  scooter_df=pd.read_excel('/content/drive/MyDrive/MINI/Dataset/electric_price.xlsx')\n","  #data.drop('Unnamed: 0',axis=1,inplace=True)\n","  #data.head(2)\n","  #category='Scooter'\n","  #category_group=data.groupby('Category')\n","  #scooter_df=category_group.get_group(category)\n","  #scooter_df.reset_index(inplace=True)\n","  scooter_df.rename(columns={'Unnamed: 0':'id','Electric two-wheeler model':'name'},inplace =True)\n","\n","  #scooter_df.info()\n","\n","  rating_matrix = scooter_df.pivot_table(index='id', columns='name', values='Ratings')\n","  rating_matrix.fillna(0,inplace=True)\n","\n","  similarity_matrix = 1 - pairwise_distances(rating_matrix.T.values, metric='correlation')\n","  similarity_df = pd.DataFrame(similarity_matrix, index=rating_matrix.columns, columns=rating_matrix.columns)\n","\n","  similarity_df.head(2)\n","\n","  def get_similar_vehicle(title, similarity_df, scooter_df, topn=5):\n","      if title in similarity_df.columns:\n","          top_movies = similarity_df[title].sort_values(ascending=False)[0:topn]\n","          top_movies_df = pd.DataFrame({'title': top_movies.index, 'similarity': top_movies.values})\n","\n","\n","          top_movies_df = pd.merge(top_movies_df, scooter_df[['Company','name','Ex-showroom price', 'Ratings']], left_on='title', right_on='name')\n","          top_movies_df.drop('name', axis=1, inplace=True)\n","          top_movies_df.drop('similarity', axis=1, inplace=True)\n","\n","          top_movies_df=top_movies_df.drop_duplicates(subset=['title'])\n","          top_movies_df.reset_index(inplace=True)\n","          top_movies_df.drop('index',axis=True,inplace=True)\n","\n","          return top_movies_df\n","      else:\n","          return \"Entered scooter is not there !!!\"\n","\n","\n","  #company='Honda'\n","  #bike_name='shine'\n","  check=bike_name\n","\n","  import re\n","  def clean_and_compare(string1, string2):\n","      clean_string1 = re.sub(r'[^a-zA-Z0-9]', '', string1).lower()\n","      clean_string2 = re.sub(r'[^a-zA-Z0-9]', '', string2).lower()\n","      return clean_string2 in clean_string1\n","\n","\n","  dataset = scooter_df['name']\n","\n","  search_string = check\n","\n","  for data in dataset:\n","      if clean_and_compare(data, search_string):\n","          vehicle_name=data\n","          break\n","  else:\n","      print(\"Not found\")\n","      exit(0)\n","\n","\n","\n","  movies_heat = get_similar_vehicle(vehicle_name, similarity_df, scooter_df)\n","  print(f\"Similar scooters to {vehicle_name}  :\\n\", movies_heat)\n","'''\n","#company='bajaj'\n","bike_name='lite'\n","#category='Streetfighter'\n","recommendation(bike_name)\n","'''\n","#########################################################\n","# Actual code\n","def ev_imformation():\n","  try:\n","    # For Electric Vehicle Imformation\n","    company=str(input(\"Enter the company name:\"))\n","    print()\n","    bike_name=str(input(\"Enter the vehicle name:\"))\n","    print()\n","\n","    # for electric\n","    import requests\n","    from bs4 import BeautifulSoup\n","\n","    '''\n","    url = \"https://www.bikewale.com/\"\n","\n","    #comp = company.replace(\" \", \"%20\")\n","    #bikename = bike_name.replace(\" \", \"%20\")\n","\n","    url=url + company +\"-\"+\"bikes/\"+bike_name\n","    '''\n","    ############################################## google search ##################\n","    from googlesearch import search\n","    query=company + bike_name + \"in bikewale\"\n","    l=[]\n","    for q in search(query,stop=1):\n","      l.append(q)\n","    url=l[0]\n","    print()\n","    print(url)\n","    ##############################################################\n","    #print(url)\n","    news_text=[]\n","    price=[]\n","    ex=[]\n","\n","    response = requests.get(url)\n","\n","    if response.status_code == 200:\n","\n","        soup = BeautifulSoup(response.text, 'html.parser')\n","\n","        news_elements = soup.find_all(class_='o-bfyaNx o-dJmcbh o-fznVmz o-fznVCp')\n","        price_elements=soup.find_all( class_ =\"o-dJmcbh o-fzoHBq o-fzoHMc o-fznVqX o-fznVsN\" )#o-fznJDS o-ckGLSv o-fznJFI o-cMwvCl o-fzpihY o-fzpilm o-brXWGL\n","\n","        #'''\n","        ex_showroom = soup.find_all(class_='o-jjpuv o-byFsZJ o-dJmcbh o-fzoTzs o-dKUdmM')\n","        for i in ex_showroom:\n","          ex.append(i.get_text(strip=True))\n","        #'''\n","        for news_element in news_elements:\n","          news_text.append(news_element.get_text(strip=True))\n","\n","        for price_element in price_elements:\n","          price.append(price_element.get_text(strip=True)) # Ex show room price\n","\n","    else:\n","        print(f\"Failed to retrieve the page. Status code: {response.status_code}\")\n","\n","\n","    info_text = news_text[0]\n","\n","    # Split the information based on specific patterns\n","    #split_info1 = info_text.split('Chetak key highlights')\n","    split_info2= info_text.split('Riding Range')\n","    split_info3= info_text.split('Top Speed')\n","    split_info4= info_text.split('Battery Charging Time')\n","    #split_info5= info_text.split('Fuel Tank Capacity')\n","    split_info6= info_text.split('Rated Power')\n","    #split_info7= info_text.split('Max Power')\n","    #split_info8= info_text.split('Rear Brake Type')\n","\n","\n","    # Extract specific pieces of information\n","    #Chetak_key_highlights = split_info1[1].split(' ')[0].strip()\n","    r_range = split_info2[1].split(' ')[0].strip()\n","    top_speed = split_info3[1].split(' ')[0].strip()\n","    battery = split_info4[1].split(' ')[0].strip()\n","    #fuel_tank= split_info5[1].split(' ')[0].strip()\n","    r_power= split_info6[1].split(' ')[0].strip()\n","    #max_power= split_info7[1].split(' ')[0].strip()\n","    #r_type= split_info8[1].split(' ')[0].strip()\n","\n","    # Print the extracted information\n","    print(\"Extracted Information:\")\n","    print()\n","    print(f\"High lights of \")\n","    print(f\"Riding Range : {r_range} km\")\n","    print(f\"Top Speed : {top_speed} kmph\")\n","    print(f\"Battery Charging Time: {battery} Hrs\")\n","    print(f\"Rated Power : {r_power} W\")\n","    #print(f\"Max Power : {max_power} W\")\n","    #print(f\"Rear Brake Type : {r_type} \")\n","\n","\n","    ####################\n","    try:\n","      print(price)\n","      data_string=price[0]\n","\n","      data_string=data_string.split('.')\n","      split_data = [item.replace('VariantPriceSpecifications', '').replace('\\n', '').strip() for item in data_string if item]\n","      print()\n","      print(\"Price Imformation :\")\n","      print()\n","      print(split_data[0])\n","    except Exception as e:\n","      print(f'Sorry!! Currently I am not able to fetch the price imformation  for {company + \" \" + bike_name}')\n","      print()\n","\n","    print('#########################################################################')\n","    print()\n","\n","    url = \"https://www.rushlane.com/?s=\"\n","\n","    comp = company.replace(\" \", \"%20\")\n","    bikename = bike_name.replace(\" \", \"%20\")\n","\n","    url=url+comp+\"+\"+bikename\n","    #url = url + comp + \"%20\" + bikename\n","    print(\"url=\",url)\n","    print()\n","\n","    import requests\n","    from bs4 import BeautifulSoup\n","\n","    response = requests.get(url)\n","\n","    if response.status_code == 200:\n","        soup = BeautifulSoup(response.text, 'html.parser')\n","        news_elements = soup.find_all(class_='entry-title td-module-title')\n","        #print(news_elements)\n","        for news_element in news_elements:\n","            news_text = news_element.get_text(strip=True)\n","            print(news_text)\n","            news_link = news_element.a.get('href','')\n","            print(news_link)\n","    else:\n","        print(f\"Failed to retrieve the page. Status code: {response.status_code}\")\n","        print()\n","    print(\"#########################################################################\")\n","\n","    print()\n","    print(\"Recommendation For You \")\n","    print()\n","    recommendation(bike_name)\n","  except Exception as e:\n","    print(\"Your data contains errors; please review and correct. \",e)\n","    print('######################################################################')\n","    print()\n","    ev_imformation()\n","#ev_imformation()"]},{"cell_type":"markdown","metadata":{"id":"ZT-fSMwH7DWC"},"source":["# Machine Learning Approaches\n","1. Data Loading\n","2. Data Preprocessing\n","3. Sentiment Analysis[using nltk toolkit]\n","4. Feature Selection\n","5. Ensemble Model\n","6. Visualization of Result\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":2903,"status":"ok","timestamp":1704598917223,"user":{"displayName":"shivaprasad shetty","userId":"09720553218955927212"},"user_tz":-330},"id":"0u3Snso42QhC","outputId":"b6d47978-e733-4fb1-fe73-5feeded6e19f"},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package vader_lexicon to /root/nltk_data...\n","[nltk_data]   Package vader_lexicon is already up-to-date!\n"]},{"output_type":"stream","name":"stdout","text":["########################################################################\n","\n","Feature Selection Method [Filter Methods]\n","\n","Pearsonr corelated features are:\n","{'ratings', 'company_name', 'ex_showroom_price', 'km_driven', 'age', 'Mileage (km/l)', 'year'}\n","\n","Spearmanr corelated features are:\n","{'ratings', 'company_name', 'name', 'Category', 'km_driven', 'ex_showroom_price', 'age', 'Mileage (km/l)', 'year'}\n","\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Important Features Selected from RandomForestRegression methods are:\n","5     ex_showroom_price\n","1                  year\n","12                  age\n","7        Mileage (km/l)\n","4             km_driven\n","10              ratings\n","Name: Feature, dtype: object\n","\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"2711e9b7-3277-489a-add8-0aadeb22d131\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"2711e9b7-3277-489a-add8-0aadeb22d131\")) {                    Plotly.newPlot(                        \"2711e9b7-3277-489a-add8-0aadeb22d131\",                        [{\"marker\":{\"color\":\"orange\"},\"x\":[\"ex_showroom_price\",\"year\",\"age\",\"Mileage (km\\u002fl)\",\"km_driven\",\"ratings\"],\"y\":[0.7504347662835349,0.06662344918238601,0.06445236954054981,0.046082606224879946,0.03361232972466281,0.010800194841264443],\"type\":\"bar\"}],                        {\"paper_bgcolor\":\"black\",\"plot_bgcolor\":\"black\",\"title\":{\"font\":{\"color\":\"green\"},\"text\":\"Top Features\"},\"xaxis\":{\"color\":\"white\",\"title\":{\"text\":\"Feature\"}},\"yaxis\":{\"color\":\"white\",\"title\":{\"text\":\"Importance\"}},\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('2711e9b7-3277-489a-add8-0aadeb22d131');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}],"source":["# machine learning\n","\n","import pandas as pd\n","import numpy as np\n","import warnings\n","warnings.filterwarnings('ignore',category = UserWarning , module='nltk.download')\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","import plotly.express as px\n","import plotly.graph_objects  as go\n","import seaborn as sn\n","import matplotlib.pyplot as plt\n","\n","\n","\n","data=pd.read_excel('/content/drive/MyDrive/MINI/Dataset/Modified_company_name.xlsx')\n","\n","data.drop(['Unnamed: 0'],axis=1,inplace=True)\n","\n","# the motorcycle price report and electric price report contains the review feature.so we need to perform the sentiment analysis for that features\n","\n","import nltk\n","nltk.download('vader_lexicon')\n","from nltk.sentiment.vader import SentimentIntensityAnalyzer\n","sia=SentimentIntensityAnalyzer()\n","\n","sentiment_dictionary_motor=data['reviews'].apply(lambda title : sia.polarity_scores(title) )\n","\n","for i in range(len(data['reviews'])):\n","  if sentiment_dictionary_motor[i]['compound'] >= 0.05:\n","    data['reviews'][i]='positive'\n","  elif sentiment_dictionary_motor[i]['compound'] <=-0.05:\n","    data['reviews'][i]='negative'\n","  else:\n","    data['reviews'][i]='neutral'\n","\n","#################################################################################\n","from sklearn.preprocessing import LabelEncoder\n","le=LabelEncoder()\n","data['seller_type']=le.fit_transform(data['seller_type'])\n","data['owner']=le.fit_transform(data['owner'])\n","data['quality']=le.fit_transform(data['quality'])\n","data['name']=le.fit_transform(data['name'])\n","data['company_name']=le.fit_transform(data['company_name'])\n","data['reviews']=le.fit_transform(data['reviews'])\n","data['Category']=le.fit_transform(data['Category'])\n","\n","'''\n","\n","x=data[['name', 'year', 'seller_type', 'owner',\n","       'km_driven', 'ex_showroom_price', 'quality', 'Mileage (km/l)',\n","       'Category', 'company_name', 'ratings', 'reviews', 'age']]\n","\n","y=data[['selling_price']]\n","\n","\n","from sklearn.preprocessing import StandardScaler\n","sc=StandardScaler()\n","x=sc.fit_transform(x)\n","y=sc.fit_transform(y)\n","'''\n","# Filter Methods for Feature Selection\n","# pearson correlation and seamon correlation\n","from scipy.stats import pearsonr\n","from scipy.stats import spearmanr\n","\n","data_points=data[['name', 'year', 'seller_type', 'owner', 'km_driven',\n","       'ex_showroom_price', 'quality', 'Mileage (km/l)', 'Category',\n","       'company_name', 'ratings', 'reviews', 'age']]\n","\n","target= data[['selling_price']]\n","\n","correlation_matrix=data_points.corr()\n","highly_corelated_data_pearson=set()\n","for feature1 in data_points.columns:\n","  for feature2 in target.columns:\n","    if feature1 !=feature2:\n","      corr,p_value=pearsonr( data[feature1],data[feature2])\n","      if p_value < 0.05 and abs(corr)>0.2:\n","        highly_corelated_data_pearson.add(feature1)\n","\n","highly_corelated_data_spearmanr=set()\n","for feature1 in data_points.columns:\n","  for feature2 in target.columns:\n","    if feature1!=feature2:\n","      corr,p_value=spearmanr(data[feature1],data[feature2])\n","      if p_value<0.05 and abs(corr) > 0.2:\n","        highly_corelated_data_spearmanr.add(feature1)\n","print('########################################################################')\n","print()\n","print(f'Feature Selection Method [Filter Methods]')\n","print()\n","print(f\"Pearsonr corelated features are:\\n{highly_corelated_data_pearson}\");print()\n","print(f\"Spearmanr corelated features are:\\n{highly_corelated_data_spearmanr}\")\n","\n","print()\n","plt.figure(figsize=(12,6))\n","plt.title(\"Correlation matrix\")\n","print()\n","sn.heatmap(data.corr(),annot=True,cmap='coolwarm')\n","plt.show()\n","\n","\n","\n","# Hybrid methods for feature selection\n","\n","\n","warnings.filterwarnings('ignore')\n","\n","rf = RandomForestRegressor()\n","rf.fit(data_points,target)\n","\n","\n","feature_importances = rf.feature_importances_\n","\n","feature_importance_df = pd.DataFrame({'Feature': data_points.columns, 'Importance': feature_importances})\n","\n","feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)\n","feature_importance_df=feature_importance_df[:6]\n","print()\n","print(f\"Important Features Selected from RandomForestRegression methods are:\\n{feature_importance_df['Feature']}\")\n","'''\n","\n","fig = px.bar(feature_importance_df, x='Feature', y='Importance',\n","             labels={'Feature': 'Features', 'Importance': 'Importance'},\n","             title='Feature Importance from Random Forest Regressor')\n","fig.show()\n","'''\n","fig=go.Bar(\n","    x=feature_importance_df['Feature'],\n","    y=feature_importance_df['Importance'],\n","\n","    marker=dict(color='orange')\n",")\n","\n","layout=go.Layout(\n","    title=\"Top Features\",\n","    title_font=dict(color='green'),\n","    xaxis=dict(title='Feature',color='white'),\n","    yaxis=dict(title='Importance',color='white'),\n","    paper_bgcolor='black',\n","    plot_bgcolor='black'\n",")\n","\n","figure=go.Figure(data=[fig],layout=layout)\n","print()\n","figure.show()\n","\n","x = data[['name', 'year','km_driven', 'ex_showroom_price', 'Mileage (km/l)','ratings', 'age']]\n","y = data[['selling_price']]\n","\n","\n","from sklearn.preprocessing import StandardScaler\n","sc=StandardScaler()\n","x=sc.fit_transform(x)\n","y=sc.fit_transform(y)\n","\n","x_train, x_split, y_train, y_split = train_test_split(x,y, test_size=0.3, random_state=0)\n","x_val, x_test, y_val, y_test = train_test_split(x_split, y_split, test_size=0.5, random_state=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":663},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1704598917224,"user":{"displayName":"shivaprasad shetty","userId":"09720553218955927212"},"user_tz":-330},"id":"vdz61vYGur86","outputId":"d2f0e35a-4fae-41e4-e4ad-de8565e9e94e"},"outputs":[{"output_type":"stream","name":"stdout","text":["RandomForestRegressor: R-squared = 91.26297383091614\n","SupportVectorRegressor: R-squared = 89.72158317533118\n","LinearRegression: R-squared = 84.49636631551607\n","DecisionTreeRegressor: R-squared = 86.4659893988695\n","VotingRegressor:0.9124843874362009\n","\n","\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"5ef1d8f1-4984-4c36-856a-42b7df2db7b0\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"5ef1d8f1-4984-4c36-856a-42b7df2db7b0\")) {                    Plotly.newPlot(                        \"5ef1d8f1-4984-4c36-856a-42b7df2db7b0\",                        [{\"marker\":{\"color\":\"orange\"},\"x\":[\"RandomForestRegressor\",\"SupportVectorRegressor\",\"LinearRegression\",\"DecisionTreeRegressor\",\"Voting_regressor\"],\"y\":[91.26297383091614,89.72158317533118,84.49636631551607,86.4659893988695,91.24843874362008],\"type\":\"bar\"}],                        {\"paper_bgcolor\":\"black\",\"plot_bgcolor\":\"black\",\"title\":{\"font\":{\"color\":\"green\"},\"text\":\"Ensemble Model Result\"},\"xaxis\":{\"color\":\"white\",\"title\":{\"text\":\"Model_name\"}},\"yaxis\":{\"color\":\"white\",\"title\":{\"text\":\"Score\"}},\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('5ef1d8f1-4984-4c36-856a-42b7df2db7b0');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}],"source":["# Ensemble Model [on company_dataset] Imformation\n","\n","# Ensemble\n","\n","from sklearn.ensemble import RandomForestRegressor, VotingRegressor\n","from sklearn.svm import SVR\n","from sklearn.linear_model import LinearRegression\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import r2_score\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","\n","rf = RandomForestRegressor()\n","svr = SVR()\n","lr = LinearRegression()\n","dt = DecisionTreeRegressor()\n","\n","estimators = [('RandomForestRegressor', rf), ('SupportVectorRegressor', svr),\n","              ('LinearRegression', lr), ('DecisionTreeRegressor', dt)]\n","\n","vr = VotingRegressor(estimators)\n","\n","vr.fit(x_train, y_train)\n","\n","\n","results = []\n","\n","for regr_name, regr in estimators:\n","    regr.fit(x_train, y_train)\n","    regr_predict = regr.predict(x_test)\n","    r2 = r2_score(y_test, regr_predict) * 100\n","    print(f\"{regr_name}: R-squared = {r2}\")\n","    results.append((regr_name, r2))\n","\n","\n","#print(results)\n","vr_predict=vr.predict(x_test)\n","vr_score=r2_score(y_test,vr_predict)\n","print(f\"VotingRegressor:{vr_score}\")\n","results.append((\"Voting_regressor\",vr_score * 100))\n","\n","print()\n","import plotly.graph_objs as go\n","\n","import pandas as pd\n","df = pd.DataFrame(results, columns=['Model', 'Score'])\n","\n","\n","fig=go.Bar(\n","    x=df['Model'],\n","    y=df['Score'],\n","\n","    marker=dict(color='orange')\n",")\n","\n","layout=go.Layout(\n","    title=\"Ensemble Model Result\",\n","    title_font=dict(color='green'),\n","    xaxis=dict(title='Model_name',color='white'),\n","    yaxis=dict(title='Score',color='white'),\n","    paper_bgcolor='black',\n","    plot_bgcolor='black'\n",")\n","\n","figure=go.Figure(data=[fig],layout=layout)\n","print()\n","figure.show()\n","\n"]},{"cell_type":"markdown","metadata":{"id":"fv0AF6IevtRx"},"source":["# Sell/Buy Price Prediction"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bpp88_7Vvs9C"},"outputs":[],"source":["\n","##################################### To Extract the Exshowroom price and Milage #######################\n","def cal_milage(company,bike_name):\n","  try:\n","    import requests\n","    from bs4 import BeautifulSoup\n","\n","\n","    from googlesearch import search\n","    query=company + bike_name + \"in bikewale\"\n","    l=[]\n","    for q in search(query,stop=1):\n","      l.append(q)\n","    url=l[0]\n","    #print(url)\n","    print()\n","    print('url=',url)\n","\n","\n","    price=[]\n","    milage_txt=[]\n","    response = requests.get(url)\n","\n","    if response.status_code == 200:\n","\n","        soup = BeautifulSoup(response.text, 'html.parser')\n","        price_elements=soup.find_all(class_='o-jjpuv o-byFsZJ o-dJmcbh o-fzoTzs o-dKUdmM')\n","        for price_element in price_elements:\n","          price.append(price_element.get_text(strip=True)) # Ex show room price\n","\n","\n","        news_elements = soup.find_all(class_='o-GFmfi o-bQXvsa o-cKSifp o-ItVGT o-cRSqer')\n","        for news_element in news_elements:\n","          milage_txt.append(news_element.get_text(strip=True))\n","    else:\n","        print(f\"Failed to retrieve the page. Status code: {response.status_code}\")\n","\n","    '''\n","    # Get the Exshowroom price\n","    prices=price[0]\n","    mod = \"\"\n","    for char in prices:\n","        if char == '₹':\n","            continue\n","        elif char == ' ' or char == ',':\n","            continue\n","        else:\n","            mod += char\n","        #print(mod)\n","    ex_showroom_price = int(mod)\n","    print(ex_showroom_price)\n","    '''\n","    # Get the milage Deatils\n","    milage= milage_txt[0]\n","    split_milage=milage.split('Mileage - Owner Reported')\n","    milage=split_milage[1].split(' ')[0].strip()\n","\n","    #print(milage)\n","    return milage\n","  except Exception as e:\n","    print()\n","    print(\"Apologies! The Fetching of milage and exshowroom price was unsuccessful. Would you like to try again\")\n","\n","################################################################################\n","# Model Prediction\n","\n","def prediction(values):\n","\n","  import pandas as pd\n","  import numpy as np\n","\n","  import warnings\n","  warnings.filterwarnings(\"ignore\", category=UserWarning, module=\"nltk.sentiment\")\n","\n","  import nltk\n","  nltk.download('vader_lexicon',quiet=True)\n","  from nltk.sentiment.vader import SentimentIntensityAnalyzer\n","\n","  from sklearn.preprocessing import LabelEncoder\n","  le=LabelEncoder()\n","\n","  from sklearn.preprocessing import StandardScaler\n","  sc=StandardScaler()\n","\n","  from sklearn.ensemble import RandomForestRegressor, VotingRegressor\n","  from sklearn.svm import SVR\n","  from sklearn.linear_model import LinearRegression\n","  from sklearn.tree import DecisionTreeRegressor\n","  from sklearn.model_selection import train_test_split\n","  from xgboost import XGBRegressor\n","  import sys\n","\n","\n","  try:\n","    data=pd.read_excel('/content/drive/MyDrive/MINI/Dataset/Modified_company_name.xlsx')\n","    data.drop(['Unnamed: 0'],axis=1,inplace=True)\n","\n","    sia=SentimentIntensityAnalyzer()\n","    sentiment_dictionary_motor=data['reviews'].apply(lambda title : sia.polarity_scores(title) )\n","\n","    for i in range(len(data['reviews'])):\n","      if sentiment_dictionary_motor[i]['compound'] >= 0.05:\n","        data.loc[i,'reviews']='positive'\n","      elif sentiment_dictionary_motor[i]['compound'] <=-0.05:\n","        data.loc[i ,'reviews']='negative'\n","      else:\n","        data.loc[i, 'reviews']='neutral'\n","\n","\n","    data['seller_type']=le.fit_transform(data['seller_type'])\n","    data['owner']=le.fit_transform(data['owner'])\n","    data['quality']=le.fit_transform(data['quality'])\n","    data['name']=le.fit_transform(data['name'])\n","    data['company_name']=le.fit_transform(data['company_name'])\n","    data['reviews']=le.fit_transform(data['reviews'])\n","    data['Category']=le.fit_transform(data['Category'])\n","\n","    x = data[['year','km_driven', 'ex_showroom_price', 'Mileage (km/l)','ratings', 'age']]\n","    y = data[['selling_price']]\n","\n","\n","    '''\n","    x=sc.fit_transform(x)\n","    y=sc.fit_transform(y)\n","    '''\n","    x_train, x_split, y_train, y_split = train_test_split(x,y, test_size=0.3, random_state=0)\n","    x_val, x_test, y_val, y_test = train_test_split(x_split, y_split, test_size=0.5, random_state=0)\n","\n","    rf = RandomForestRegressor()\n","    svr = SVR()\n","    lr = LinearRegression()\n","    dt = DecisionTreeRegressor()\n","    xgb= XGBRegressor()\n","\n","    estimators = [('RandomForestRegressor', rf), ('SupportVectorRegressor', svr),\n","                ('LinearRegression', lr), ('DecisionTreeRegressor', dt),('XGBRegressor',xgb)]\n","\n","    '''\n","    estimators = [('RandomForestRegressor', rf),\n","                  ('LinearRegression', lr), ('DecisionTreeRegressor', dt)]\n","    '''\n","    vr = VotingRegressor(estimators)\n","\n","    vr.fit(x,y)\n","\n","    results = []\n","\n","    for regr_name, regr in estimators:\n","        regr.fit(x,y)\n","        regr_predict = int(regr.predict(values))\n","        #print(f\"{regr_name} ={regr_predict}\")\n","        results.append((regr_name, regr_predict))\n","\n","\n","    vr_predict=int(vr.predict(values))\n","    #print(f\"VotingRegressor:{vr_predict}\")\n","    results.append((\"Voting_regressor\",vr_predict))\n","\n","\n","    #print(f\"Final Selling_Price is: {df['Predicted_price'][0]}\")\n","    df = pd.DataFrame(results, columns=['Model', 'Predicted_price'])\n","    #print(df)\n","    selling_price=df['Predicted_price']\n","    min_selling=min(selling_price)\n","    max_selling=max(selling_price)\n","    #print(min_selling)\n","    #print(max_selling)\n","\n","    return min_selling,max_selling,df\n","  except Exception as e:\n","    print()\n","    print(\"Apologies! The prediction was unsuccessful. Would you like to try again\")\n","    '''\n","    inpu=str(input(\"(Type 'y' for yes or 'n' for no) Restart the code to update your input.):\"))\n","    if inpu == 'y':\n","      sys.exit()\n","    '''\n","\n","# Prediction Report\n","def prediction_report(df):\n","  try:\n","\n","    import pandas as pd\n","    import numpy as np\n","\n","    import warnings\n","    warnings.filterwarnings(\"ignore\", category=UserWarning, module=\"nltk.sentiment\")\n","\n","    import nltk\n","    nltk.download('vader_lexicon',quiet=True)\n","    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n","\n","    from sklearn.preprocessing import LabelEncoder\n","    le=LabelEncoder()\n","\n","    from sklearn.preprocessing import StandardScaler\n","    sc=StandardScaler()\n","\n","    from sklearn.ensemble import RandomForestRegressor, VotingRegressor\n","    from sklearn.svm import SVR\n","    from sklearn.linear_model import LinearRegression\n","    from sklearn.tree import DecisionTreeRegressor\n","    from sklearn.model_selection import train_test_split\n","    import plotly.graph_objects as go\n","\n","\n","\n","    data=pd.read_excel('/content/drive/MyDrive/MINI/Dataset/Modified_company_name.xlsx')\n","    data.drop(['Unnamed: 0'],axis=1,inplace=True)\n","\n","    sia=SentimentIntensityAnalyzer()\n","    sentiment_dictionary_motor=data['reviews'].apply(lambda title : sia.polarity_scores(title) )\n","\n","    for i in range(len(data['reviews'])):\n","      if sentiment_dictionary_motor[i]['compound'] >= 0.05:\n","        data.loc[i, 'reviews'] = 'positive'\n","      elif sentiment_dictionary_motor[i]['compound'] <=-0.05:\n","        data.loc[i, 'reviews'] = 'negative'\n","      else:\n","        data.loc[i, 'reviews'] = 'neutral'\n","\n","\n","\n","    data['seller_type']=le.fit_transform(data['seller_type'])\n","    data['owner']=le.fit_transform(data['owner'])\n","    data['quality']=le.fit_transform(data['quality'])\n","    data['name']=le.fit_transform(data['name'])\n","    data['company_name']=le.fit_transform(data['company_name'])\n","    data['reviews']=le.fit_transform(data['reviews'])\n","    data['Category']=le.fit_transform(data['Category'])\n","\n","    x = data[['year','km_driven', 'ex_showroom_price', 'Mileage (km/l)','ratings', 'age']]\n","    y = data[['selling_price']]\n","\n","\n","    '''\n","    x=sc.fit_transform(x)\n","    y=sc.fit_transform(y)\n","    '''\n","    x_train, x_split, y_train, y_split = train_test_split(x,y, test_size=0.3, random_state=0)\n","    x_val, x_test, y_val, y_test = train_test_split(x_split, y_split, test_size=0.5, random_state=0)\n","\n","    rf = RandomForestRegressor()\n","    svr = SVR()\n","    lr = LinearRegression()\n","    dt = DecisionTreeRegressor()\n","    '''\n","    estimators = [('RandomForestRegressor', rf), ('SupportVectorRegressor', svr),\n","                ('LinearRegression', lr), ('DecisionTreeRegressor', dt)]\n","\n","    '''\n","    estimators = [('RandomForestRegressor', rf),\n","                  ('LinearRegression', lr), ('DecisionTreeRegressor', dt)]\n","    print()\n","    print(\"Analysis of Prediction Results using Different Regression Techniques\")\n","    print()\n","    '''\n","    vr = VotingRegressor(estimators)\n","    vr.fit(x,y)\n","    results = []\n","    for regr_name, regr in estimators:\n","        regr.fit(x,y)\n","        regr_predict = int(regr.predict(values))\n","        print(f\"{regr_name} ={regr_predict}\")\n","        results.append((regr_name, regr_predict))\n","\n","    vr_predict=int(vr.predict(values))\n","    print(f\"VotingRegressor:{vr_predict}\")\n","    results.append((\"Voting_regressor\",vr_predict))\n","\n","    print()\n","    import plotly.graph_objs as go\n","\n","    import pandas as pd\n","    df = pd.DataFrame(results, columns=['Model', 'Predicted_price'])\n","    '''\n","    print(df)\n","    fig=go.Bar(\n","        x=df['Model'],\n","        y=df['Predicted_price'],\n","\n","        marker=dict(color='orange')\n","\n","    )\n","    layout=go.Layout(\n","        title=\"Ensemble Model Result\",\n","        title_font=dict(color='green'),\n","        xaxis=dict(title='Model_name',color='white'),\n","        yaxis=dict(title='Predicted_Price',color='white'),\n","        paper_bgcolor='black',\n","        plot_bgcolor='black'\n","    )\n","\n","    figure=go.Figure(data=[fig], layout=layout)\n","    figure.update_traces(width=.1)\n","    print()\n","\n","    print(\"Data Visualization: Results in Graphs:\")\n","    print()\n","    figure.show()\n","  except Exception as e:\n","    print()\n","    print('The prediction report cannot be retrieved at the moment',e)\n","\n","\n","#prediction_report(values)\n","\n","# Actual code\n","def Final_code():\n","  try:\n","\n","    import pandas as pd\n","    import re\n","    import warnings\n","    import sys\n","    warnings.filterwarnings(\"ignore\", category=UserWarning, module=\"nltk.sentiment\")\n","    #warnings.filterwarnings(\"ignore\", category=SettingWithCopyWarning)\n","    #warnings.filterwarnings(\"ignore\", category=DataConversionWarning)\n","    warnings.filterwarnings(\"ignore\", category=UserWarning)\n","    def get_showroom_price():\n","      try:\n","\n","        data = pd.read_excel('/content/drive/MyDrive/MINI/Dataset/Modified_company_name.xlsx')\n","\n","        company=str(input(\"Enter the Company name: \"))\n","        bike_name=str(input(\"Enter the Bike Name: \"))\n","        model=int(input(\"enter the model year: \"))\n","\n","        ########################### search##############################\n","        from googlesearch import search\n","        q= company + \" \" + bike_name +\" Ex-showroom price in \"+ str(model)\n","        ##################################\n","\n","        check = company +' '+ bike_name\n","\n","\n","        clean_names = data['name'].str.replace(r'[^a-zA-Z0-9]', '', regex=True).str.lower()\n","        matching_rows = data[clean_names.str.contains(re.sub(r'[^a-zA-Z0-9]', '', check).lower())]\n","\n","        if not matching_rows.empty:\n","\n","            model_str = str(model)\n","\n","\n","            matching_rows = matching_rows[(matching_rows['year'].astype(str) == model_str)]\n","\n","            if not matching_rows.empty:\n","\n","                #print(matching_rows['ex_showroom_price'].iloc[0])\n","                exshowroom_price = matching_rows['ex_showroom_price'].iloc[0]\n","                ratings= matching_rows['ratings'].iloc[0]\n","            else:\n","                print(f\"No matching entry found for {check} and model year {model}\")\n","                print()\n","\n","\n","                inpu=str(input(\"Do you want to provide a different model year? (Type 'y' for yes or 'n' for no) Restart the code to update your input.):\"))\n","                if inpu == 'y':\n","                  sys.exit()\n","\n","\n","                print(\"Explore the following websites for more information:\")\n","                print()\n","                for url in search(q,stop=5):\n","                  print(url)\n","\n","                print()\n","                exshowroom_price=int(input(f\" Please provide the ex-showroom price for {check} in the year {model}: \"))\n","                print()\n","                ratings=float(input(f\"Please provide the ratings( <=5)  for {check} in the year  {model}: \"))\n","\n","\n","\n","        else:\n","            print()\n","            print(f\"No matching entry found for {check}\")\n","            print(f\"[Kindly double-check the company and bike name you supplied:]\")\n","            print(\"Rerun the code ....\")\n","            sys.exit()\n","            print()\n","            #get_showroom_price()\n","\n","        #print()\n","        km_driven=int(input(\"Enter how much  total Kilo meter travelled:\"))\n","        milage=cal_milage(company,bike_name)\n","        #print(type(milage))\n","        '''\n","        print(f\"Ex-showroom price: {exshowroom_price}\")\n","        print(f\"Ratings: {ratings}\")\n","        print(f\"Kilometers Driven: {km_driven}\")\n","        print(f\"Milage: {milage}\")\n","        '''\n","\n","        #'name', 'year','km_driven', 'ex_showroom_price', 'Mileage (km/l)','ratings', 'age'\n","        age=2023 - int(model)\n","        new_data=pd.DataFrame(columns=['Company_Bike', 'Model', 'Km_Driven', 'Exshowroom_Price', 'Mileage', 'Ratings', 'Age'])\n","        '''\n","        new_data = new_data.append({'Company_Bike': check, 'Model': model, 'Km_Driven': km_driven,\n","                                    'Exshowroom_Price': exshowroom_price, 'Mileage': int(milage),\n","                                    'Ratings': ratings, 'Age': age}, ignore_index=True)\n","        '''\n","\n","        new_data = pd.concat([new_data, pd.DataFrame({'Company_Bike': [check], 'Model': [model],\n","                                                      'Km_Driven': [km_driven],'Exshowroom_Price': [exshowroom_price],\n","                                                      'Mileage': [int(float(milage))],\n","                                    'Ratings': [ratings], 'Age': [age]})], ignore_index=True)\n","        #print(new_data)\n","      except Exception as  e:\n","        print()\n","        print(\"Your data contains errors; please review and correct. \",e)\n","        print()\n","        get_showroom_price()\n","      return new_data,check,model,company,bike_name\n","    new_data,check,model,company,bike_name=get_showroom_price()\n","\n","    values=new_data[['Model','Km_Driven','Exshowroom_Price','Mileage','Ratings','Age']].values\n","\n","    min_selling,max_selling,df=prediction(values)\n","\n","    print(f'The suggested selling price for {check} is: ')\n","    print(f\"Maximum price is :{max_selling}\")\n","    print(f\"Minimum price is :{min_selling}\")\n","\n","\n","    print()\n","    re=str(input(\"Would you like to confirm the proposed selling price?  (Type 'y' for yes or 'n' for no) \"))\n","    if re=='y':\n","      query= str(model) +' '+ company + ' '+bike_name+' Second hand price'\n","      print()\n","      print(query)\n","      print()\n","\n","      from googlesearch import search\n","      for q in search(query,stop=2):\n","        print(q)\n","        #print()\n","\n","      print()\n","      print()\n","\n","\n","    signal=str(input(\"Would you like to view the prediction report? (Type 'y' for yes or 'n' for no)\"))\n","    if signal=='y':\n","      prediction_report(df)\n","  except Exception as e:\n","    print()\n","    print(\"Some error is occured!!!\",e)\n","\n","#Final_code()\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"T_UBaWoWGkys"},"source":["# Future Forecasting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9EtHVSmMzRyY"},"outputs":[],"source":["def sales_report_petrol():\n","  import pandas as pd\n","  import plotly.graph_objects as go\n","  import warnings\n","  warnings.filterwarnings('ignore')\n","\n","  data=pd.read_excel('/content/drive/MyDrive/MINI/Dataset/Motorcycle_anual_report.xlsx')\n","  grp=data.groupby('company_name')\n","  items=grp.indices\n","  keys=items.keys()\n","\n","  keys = ['Bajaj', 'Hero', 'Honda', 'Jawa', 'KTM', 'Kawasaki', 'Mahindra', 'Piaggio', 'Royal Enfield', 'Suzuki', 'TVS', 'Yamaha']\n","  company=str(input(f\"Which company's sales report are you interested in?\\n{', '.join(keys)} : \"))\n","\n","  data=grp.get_group(company)\n","  data.drop('company_name',axis=1,inplace=True)\n","  data.set_index('year',inplace=True)\n","  data.index=pd.to_datetime(data.index,format='%Y')\n","\n","\n","\n","  data=go.Scatter(\n","      x=data.index,\n","      y=data['sales'],\n","      mode='lines',\n","      line=dict(color='orange')\n","  )\n","  layout=go.Layout(\n","      title= company +' Sales Report of past 10 years',\n","      xaxis=dict(title='year'),\n","      yaxis=dict(title='sales'),\n","      paper_bgcolor='black',\n","      plot_bgcolor='black'\n","      )\n","  figure=go.Figure(data=data,layout=layout)\n","  print()\n","  print()\n","  figure.show()\n","\n","\n","\n","\n","#sales_report_petrol()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q9TxKoqy9yyj"},"outputs":[],"source":["def sales_report_ev():\n","\n","  import pandas as pd\n","  import plotly.graph_objects as go\n","  import warnings\n","  warnings.filterwarnings('ignore')\n","\n","  data=pd.read_excel('/content/drive/MyDrive/MINI/Dataset/sales_report_mod.xlsx')\n","  grp=data.groupby('Brand')\n","  items=grp.indices\n","  keys=items.keys()\n","  #print(keys)\n","\n","  keys = ['Ola Electric','BAJAJ AUTO LTD','TVS MOTOR COMPANY LTD','ATHER ENERGY PVT LTD','Hero MotoCorp']\n","  company=str(input(f\"Which company's sales report are you interested in?\\n{', '.join(keys)} : \"))\n","\n","  data=grp.get_group(company)\n","  #print(data)\n","  data.drop('Brand',axis=1,inplace=True)\n","  data.set_index('Year',inplace=True)\n","  data.index=pd.to_datetime(data.index,format='%Y')\n","\n","\n","\n","  data=go.Scatter(\n","      x=data.index,\n","      y=data['Sales'],\n","      mode='lines',\n","      line=dict(color='orange')\n","  )\n","  layout=go.Layout(\n","      title= company +' Sales Report of past 10 years',\n","      xaxis=dict(title='year'),\n","      yaxis=dict(title='sales'),\n","      paper_bgcolor='black',\n","      plot_bgcolor='black'\n","      )\n","  figure=go.Figure(data=data,layout=layout)\n","  print()\n","  print()\n","  figure.show()\n","  print()\n","  print('#################### Representation of ev scooter price and petrol scooter price######################')\n","  print()\n","  print()\n","  def Graphica_representation():\n","    import pandas as pd\n","\n","    scooter_df=pd.read_excel('/content/drive/MyDrive/MINI/Dataset/Modified_company_name.xlsx')\n","    electric_df=pd.read_excel('/content/drive/MyDrive/MINI/Dataset/electric_price.xlsx')\n","    #print(scooter_df.head(2))\n","    #########################################################################################\n","    import plotly.graph_objects as go\n","\n","\n","    scooter_prices = scooter_df['ex_showroom_price'][:100]\n","    electric_prices = electric_df['Ex-showroom price'][:100]\n","\n","    fig = go.Figure()\n","\n","    fig.add_trace(go.Scatter(\n","        x=scooter_df['name'],\n","        y=scooter_prices,\n","        mode='markers',\n","        name='Motorcycle Scooter Price',\n","        line=dict(color='blue', width=2),\n","        marker=dict(color='blue', size=8)\n","    ))\n","\n","    fig.add_trace(go.Scatter(\n","        x=electric_df['Electric two-wheeler model'],\n","        y=electric_prices,\n","        mode='markers',\n","        name='Electric Scooter Price',\n","        line=dict(color='green', width=2),\n","        marker=dict(color='green', size=8)\n","    ))\n","\n","    layout = go.Layout(\n","        title='Line Graph: Comparison of Motorcycle Scooter and Electric Scooter Prices',\n","        xaxis=dict(title='Scooter Models'),\n","        yaxis=dict(title='Ex-showroom Price'),\n","        paper_bgcolor='white',\n","        plot_bgcolor='white'\n","    )\n","\n","    fig.update_layout(layout)\n","    fig.show()\n","  Graphica_representation()\n","\n","#sales_report_ev()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"89kcAbAB_9tS"},"outputs":[],"source":["def sarimax():\n","  import pandas as pd\n","  import numpy as np\n","  import matplotlib.pyplot as plt\n","  from statsmodels.tsa.statespace.sarimax import SARIMAX\n","  from sklearn.metrics import mean_squared_error\n","  import plotly.graph_objects as go\n","  import warnings\n","  warnings.filterwarnings('ignore')\n","\n","  data=pd.read_excel('/content/drive/MyDrive/MINI/Dataset/Motorcycle_anual_report.xlsx')\n","  grp=data.groupby('company_name')\n","  items=grp.indices\n","  keys=items.keys()\n","\n","  keys = ['Bajaj', 'Hero', 'Honda', 'Jawa', 'KTM', 'Kawasaki', 'Mahindra', 'Piaggio', 'Royal Enfield', 'Suzuki', 'TVS', 'Yamaha']\n","  company=str(input(f\"Which company's sales report are you interested in?\\n{', '.join(keys)} : \"))\n","\n","  data=grp.get_group(company)\n","  #print(data)\n","  data.drop('company_name',axis=1,inplace=True)\n","  data.set_index('year',inplace=True)\n","  data.index=pd.to_datetime(data.index,format='%Y')\n","\n","  data.sort_values(by='year',inplace=True)\n","  train=data[:-2]\n","  test=data[-2:]\n","\n","  train['sales'] = train['sales'].astype(float)\n","  order = (2,2,2) # ARIMA model\n","  seasonal_order = (1,1,1,12)\n","  model = SARIMAX(train.astype(np.float64).to_numpy(), order=order, seasonal_order=seasonal_order)\n","  fit_model = model.fit()\n","\n","  y_pred = fit_model.get_forecast(len(test.index))\n","  y_pred_df = y_pred.conf_int(alpha = 0.05)\n","\n","  y_pred_df=pd.DataFrame(y_pred_df,columns=['lower','upper'])\n","  y_pred_df['prediction']=y_pred.predicted_mean\n","\n","  y_pred_df['prediction']=y_pred_df['prediction'].astype(int)\n","\n","  #print(y_pred_df['prediction'])\n","  #print(test)\n","\n","  # Calculate RMSE for evaluation\n","  rmse = np.sqrt(mean_squared_error(test['sales'], y_pred_df['prediction']))\n","  #print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n","  #print(get_mape(test['sales'], y_pred_df['prediction']))\n","\n","  # Forecast\n","  print()\n","  forecast_steps = int(input(\"Enter the Forecast Steps(<5): \"))\n","  print()\n","  forecast = fit_model.get_forecast(steps=forecast_steps)\n","\n","  forecast_index = pd.date_range(test.index[-1] + pd.DateOffset(years=1), periods=forecast_steps, freq='AS')\n","  #print(forecast_index)\n","  forecast_values = forecast.predicted_mean\n","\n","  import plotly.graph_objects as go\n","\n","  data = go.Bar(\n","      x=data.index,\n","      y=train['sales'],\n","      name='Actual',\n","      marker=dict(color='orange')\n","  )\n","  pred = go.Bar(\n","      x=test.index,\n","      y=y_pred_df['prediction'],\n","      name='Predicted',\n","      marker=dict(color='green')\n","  )\n","  forecast = go.Bar(\n","      x=forecast_index,\n","      y=forecast_values,\n","      name='Forecast',\n","      marker=dict(color='blue')\n","  )\n","  layout = go.Layout(\n","      xaxis=dict(title='Year'),\n","      yaxis=dict(title='Sales'),\n","      showlegend=True,\n","      paper_bgcolor='black',\n","      plot_bgcolor='black'\n","  )\n","  figure = go.Figure(data=[data, pred, forecast], layout=layout)\n","  print()\n","  figure.show()\n","\n","#sarimax()\n","\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HkeqvGv5fI3U"},"outputs":[],"source":["def ensemble():\n","  try:\n","\n","    data=pd.read_excel('/content/drive/MyDrive/MINI/Dataset/Motorcycle_anual_report.xlsx')\n","    grp=data.groupby('company_name')\n","    items=grp.indices\n","    keys=items.keys()\n","\n","    keys = ['Bajaj', 'Hero', 'Honda', 'Jawa', 'KTM', 'Kawasaki', 'Mahindra', 'Piaggio', 'Royal Enfield', 'Suzuki', 'TVS', 'Yamaha']\n","    company=str(input(f\"Which company's sales report are you interested in?\\n{', '.join(keys)} : \"))\n","\n","    data=grp.get_group(company)\n","    data.drop('company_name',axis=1,inplace=True)\n","\n","    data=data.sort_values(by='year',ascending=True)\n","\n","    feature=data['year'].values.reshape(-1,1)\n","    target=data['sales'].values.reshape(-1,1)\n","    x_train=feature[:12]\n","    y_train=target[:12]\n","    x_test=feature[12:]\n","    y_test=target[12:]\n","\n","    #x_fore=np.array([2023,2024]).reshape(-1,1)\n","    print()\n","    forecast_step=int(input(\"Enter the Forecast Steps(<5) : \"))\n","    last_index=x_test[-1].item()\n","    last_index=pd.to_datetime(last_index,format='%Y')\n","    forecast_index = pd.date_range(last_index + pd.DateOffset(years=1),\n","                                  periods=forecast_step, freq='AS')\n","\n","    forecast_index_d=forecast_index.strftime('%Y').astype(int).to_list()\n","\n","    forecast_index=np.array(forecast_index_d).reshape(-1,1)\n","    #print(forecast_index)\n","\n","\n","    def forecast(forecast_index):\n","      from sklearn.ensemble import RandomForestRegressor, VotingRegressor\n","      from sklearn.svm import SVR\n","      from sklearn.linear_model import LinearRegression\n","      from sklearn.tree import DecisionTreeRegressor\n","      from sklearn.model_selection import train_test_split\n","      from sklearn.metrics import r2_score\n","      from xgboost import XGBRegressor\n","      import warnings\n","      warnings.filterwarnings('ignore')\n","\n","\n","      rf = RandomForestRegressor()\n","      svr = SVR()\n","      lr = LinearRegression()\n","      dt = DecisionTreeRegressor()\n","      xgb=XGBRegressor()\n","      '''\n","      estimators = [('RandomForestRegressor', rf), ('SupportVectorRegressor', svr),\n","                  ('LinearRegression', lr), ('DecisionTreeRegressor', dt)]\n","\n","      '''\n","      estimators = [('RandomForestRegressor', rf),('SupportVectorRegressor', svr),\n","                    ('LinearRegression', lr), ('DecisionTreeRegressor', dt), ('XGBRegressor',xgb)]\n","\n","\n","      vr = VotingRegressor(estimators)\n","\n","      vr.fit(x_train, y_train)\n","\n","\n","\n","\n","      for regr_name, regr in estimators:\n","          regr.fit(x_train, y_train)\n","          regr_predict = regr.predict(forecast_index)\n","          regr_predict=regr_predict.reshape(-1,1)\n","          print(f\"{regr_name} ={regr_predict}\")\n","\n","          results.append((forecast_index.item(),regr_name, int(regr_predict)))\n","\n","\n","      vr_predict=vr.predict(forecast_index)\n","      print(f\"VotingRegressor:{vr_predict}\")\n","\n","      results.append((forecast_index.item(),\"Voting_regressor\",int(vr_predict)))\n","      #print(results)\n","      return results\n","\n","\n","    results = []\n","    print()\n","    print(\"Ensemble Prediction Report :\")\n","    for i in range(forecast_step):\n","      print()\n","      print(forecast_index[i])\n","      result=forecast(forecast_index[i].reshape(-1,1))\n","      print()\n","\n","    df = pd.DataFrame(result, columns=['Year', 'Model', 'Predicted_price'])\n","    df['Model']=df['Model'].astype(str)\n","    df['Year'] = pd.to_datetime(df['Year'], format='%Y')\n","    #print(df)\n","    #print(df.info())\n","    fig = go.Figure()\n","\n","    # Add a line for each model\n","    for model in df['Model'].unique():\n","        model_data = df[df['Model'] == model] #mode='lines+markers',\n","        fig.add_trace(go.Bar(x=model_data['Year'], y=model_data['Predicted_price'],  name=model))\n","\n","    # Update layout\n","    fig.update_layout(\n","        title=\"Predicted Prices Over Years\",\n","        xaxis=dict(title='Year'),\n","        yaxis=dict(title='Predicted Price'),\n","        legend=dict(title='Model', orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1),\n","        template=\"plotly_dark\"\n","    )\n","\n","    # Show the figure\n","    fig.show()\n","  except Exception as e:\n","    print(\"Unable print the Sales Forecasting Report !!\",e)\n","\n","\n","#ensemble()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dNACbnTgMLOA"},"outputs":[],"source":["def LSTM():\n","  try:\n","    ############################## Data Preprocessing ##########################\n","    import numpy as np\n","    import pandas as pd\n","    import torch\n","\n","    data=pd.read_excel('/content/drive/MyDrive/MINI/Dataset/Motorcycle_anual_report.xlsx')\n","    grp=data.groupby('company_name')\n","    items=grp.indices\n","    keys=items.keys()\n","\n","    keys = ['Bajaj', 'Hero', 'Honda', 'Jawa', 'Kawasaki', 'Mahindra', 'Piaggio', 'Royal Enfield', 'Suzuki', 'TVS', 'Yamaha']\n","    company=str(input(f\"Which company's sales report are you interested in?\\n{', '.join(keys)} : \"))\n","\n","    data=grp.get_group(company)\n","    data.drop('company_name',axis=1,inplace=True)\n","\n","    data=data.sort_values(by='year',ascending=True)\n","\n","    feature=np.array(data['year'])\n","    target=np.array(data['sales'])\n","\n","    from sklearn.preprocessing import StandardScaler\n","    sc=StandardScaler()\n","    feature=feature.fit_transform(feature)\n","    target=target.fit_transform(target)\n","\n","\n","    def create_dataset(feature,target,lookback):\n","        x, y = [], []\n","        for i in range(len(feature) -lookback+1):\n","            feature1 = feature[i:i + lookback].reshape(-1,1).astype(np.float32)\n","            target1 = target[i:i + lookback].astype(np.float32)\n","            x.append(feature1)\n","            y.append(target1)\n","            '''\n","            print(i)\n","            print(y)\n","            print(x)\n","            '''\n","        return torch.tensor(x), torch.tensor(y)\n","    #print(create_dataset(feature[:11],target[:11], 1))\n","    x_train, y_train = create_dataset(feature[:11],target[:11], 1)\n","    x_test, y_test = create_dataset(feature[11:],target[11:] , 1)\n","\n","    x_train=x_train.view(-1,1,1)\n","    x_test=x_test.view(-1,1,1)\n","    y_train=y_train.view(-1,1,1)\n","    y_test=y_test.view(-1,1,1)\n","    #print(x_test)\n","\n","    ############### x_test #########################################\n","    def xtest_prediction(x_train,y_train,x_test,y_test):\n","      import torch\n","      import torch.nn as nn\n","      from sklearn.model_selection import ParameterGrid\n","      from sklearn.metrics import mean_squared_error\n","      import numpy as np\n","      import pandas as pd\n","\n","\n","      x_train = torch.tensor(x_train, dtype=torch.float32)\n","      y_train = torch.tensor(y_train, dtype=torch.float32)\n","\n","      input=torch.tensor([[2024],[2025]],dtype=torch.float32)\n","      class Sales(nn.Module):\n","          def __init__(self, input_size, hidden_size, num_layers, output_size):\n","              super(Sales, self).__init__()\n","              self.lstm1 = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True)\n","              self.lstm2 = nn.LSTM(hidden_size, hidden_size,num_layers, batch_first=True)\n","              #self.lstm3 = nn.GRU(hidden_size, hidden_size,num_layers, batch_first=True)\n","              self.linear = nn.Linear(hidden_size, output_size)\n","\n","          def forward(self, x):\n","              x, _ = self.lstm1(x)\n","              x,_ = self.lstm2(x)\n","              #x,_ = self.lstm3(x)\n","              x = self.linear(x)\n","              return x\n","\n","      def calculate_rmse(predictions, targets):\n","          predictions = predictions.squeeze(2) if predictions.ndim == 3 else predictions\n","          targets = targets.squeeze(2) if targets.ndim == 3 else targets\n","          mse = mean_squared_error(predictions, targets)\n","          rmse = np.sqrt(mse)\n","          return rmse\n","\n","\n","      input_size = x_train.shape[2]\n","      output_size = 1\n","\n","      param_grid = {\n","          'hidden_size': [2, 4, 6, 7, 8, 10],\n","          'num_layers': [1, 2, 3, 4, 5],\n","          'lr': [0.001, 0.01]\n","      }\n","\n","\n","      best_hyperparameters_model1 = None\n","      pred=[]\n","\n","\n","      hidden_size = 10\n","\n","      lr = 0.01\n","      num_layers =2\n","\n","      model = Sales(input_size, hidden_size, num_layers, output_size)\n","      criterion = nn.MSELoss()\n","      optimizer = torch.optim.SGD(model.parameters(), lr=lr)\n","      num_epochs = 10\n","      def train(num_epochs,x_train,y_train,x_test,y_test):\n","        least_loss = float(\"inf\")\n","        for epoch in range(num_epochs):\n","            outputs = model(x_train)\n","            optimizer.zero_grad()\n","            loss = criterion(outputs, y_train.unsqueeze(2))  # Ensure y_train has the right dimensions\n","            loss.backward()\n","            optimizer.step()\n","                #print(f'Epoch [{epoch + 1}/{num_epochs}], Hyperparameters: {hyperparameters}, Loss: {loss.item():.4f}')\n","\n","\n","        with torch.no_grad():\n","            y_pred = model(x_test)\n","\n","            rmse = calculate_rmse(y_pred.numpy(), y_test.numpy())\n","\n","            if rmse < least_loss:\n","                least_loss = rmse\n","                #best_hyperparameters_model1 = hyperparameters\n","\n","        return y_pred,least_loss\n","\n","      #y_pred,least_loss=train(num_epochs,x_train,y_train,x_test,forecast_index[0])\n","      pred=[]\n","      loss=[]\n","\n","      y_pred_df = pd.DataFrame(columns=['pred'])\n","      #print(x_test)\n","      for i in range(len(x_test)):\n","        y_pred,least_loss=train(num_epochs,x_train,y_train,x_test[i],y_test[i])\n","        numpy=y_pred.numpy()\n","        last_index=numpy[-1].item()\n","\n","\n","        sum= last_index + least_loss - 100000\n","        pred.append(sum)\n","\n","      #predi=np.array(pred,dtype=np.float32)\n","      y_pred_df['pred']= pred\n","\n","      print(y_pred_df)\n","      return y_pred_df\n","\n","  ############################# preddiction for future forecast indexes #######\n","\n","    def prediction(x_train,y_train,x_test,y_test):\n","      import torch\n","      import torch.nn as nn\n","      from sklearn.model_selection import ParameterGrid\n","      from sklearn.metrics import mean_squared_error\n","      import numpy as np\n","      import pandas as pd\n","\n","\n","      x_train = torch.tensor(x_train, dtype=torch.float32)\n","      y_train = torch.tensor(y_train, dtype=torch.float32)\n","\n","      ##############################################\n","      print()\n","      forecast_step= int(input(\" Enter the Forecast Steps(<5)\"))\n","      print()\n","      numpy=x_test.numpy()\n","      last_index=numpy[-1].item()\n","      last_index=pd.to_datetime(last_index,format='%Y')\n","      forecast_index = pd.date_range(last_index + pd.DateOffset(years=1),\n","                                    periods=forecast_step, freq='AS')\n","\n","      forecast_index_d=forecast_index.strftime('%Y').astype(float).to_list()\n","      forecast_index=torch.tensor(forecast_index_d,dtype=torch.float32).unsqueeze(1)\n","\n","      ####################################################\n","\n","      #input=torch.tensor([[2024],[2025]],dtype=torch.float32)\n","      class Sales(nn.Module):\n","          def __init__(self, input_size, hidden_size, num_layers, output_size):\n","              super(Sales, self).__init__()\n","              self.lstm1 = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True)\n","              self.lstm2 = nn.LSTM(hidden_size, hidden_size,num_layers, batch_first=True)\n","              #self.lstm3 = nn.GRU(hidden_size, hidden_size,num_layers, batch_first=True)\n","              self.linear = nn.Linear(hidden_size, output_size)\n","\n","          def forward(self, x):\n","              x, _ = self.lstm1(x)\n","              x,_ = self.lstm2(x)\n","              #x,_ = self.lstm3(x)\n","              x = self.linear(x)\n","              return x\n","\n","      def calculate_rmse(predictions, targets):\n","          predictions = predictions.squeeze(2) if predictions.ndim == 3 else predictions\n","          targets = targets.squeeze(2) if targets.ndim == 3 else targets\n","          mse = mean_squared_error(predictions, targets)\n","          rmse = np.sqrt(mse)\n","          return rmse\n","\n","\n","      input_size = x_train.shape[2]\n","      output_size = 1\n","\n","      param_grid = {\n","          'hidden_size': [2, 4, 6, 7, 8, 10],\n","          'num_layers': [1, 2, 3, 4, 5],\n","          'lr': [0.001, 0.01]\n","      }\n","\n","\n","      best_hyperparameters_model1 = None\n","      pred=[]\n","\n","\n","      hidden_size = 10\n","      lr = 0.01\n","      num_layers =2\n","\n","      model = Sales(input_size, hidden_size, num_layers, output_size)\n","      criterion = nn.MSELoss()\n","      optimizer = torch.optim.SGD(model.parameters(), lr=lr)\n","      num_epochs = 10\n","      def train(num_epochs,x_train,y_train,x_test,forecast_index):\n","        least_loss = float(\"inf\")\n","        for epoch in range(num_epochs):\n","            outputs = model(x_train)\n","            optimizer.zero_grad()\n","            loss = criterion(outputs, y_train.unsqueeze(2))  # Ensure y_train has the right dimensions\n","            loss.backward()\n","            optimizer.step()\n","                #print(f'Epoch [{epoch + 1}/{num_epochs}], Hyperparameters: {hyperparameters}, Loss: {loss.item():.4f}')\n","\n","\n","        with torch.no_grad():\n","            y_pred = model(x_test)\n","\n","            rmse = calculate_rmse(y_pred.numpy(), y_test.numpy())\n","\n","            if rmse < least_loss:\n","                least_loss = rmse\n","                #best_hyperparameters_model1 = hyperparameters\n","\n","        with torch.no_grad():\n","\n","          input_tensor = forecast_index.unsqueeze(1)\n","          y_pred_fore = model(input_tensor)\n","          #print(y_pred_fore)\n","\n","\n","        return y_pred_fore,least_loss\n","\n","      #y_pred,least_loss=train(num_epochs,x_train,y_train,x_test,forecast_index[0])\n","      pred=[]\n","      loss=[]\n","      final=pd.DataFrame(columns=['prediction'])\n","\n","      for i in range(forecast_step):\n","        y_pred,least_loss=train(num_epochs,x_train,y_train,x_test,forecast_index[i])\n","        numpy=y_pred.numpy()\n","        last_index=numpy[-1].item()\n","        sum= last_index + least_loss\n","        pred.append(sum)\n","      pred=np.array(pred,dtype=np.float32)\n","\n","      final['prediction']= pred\n","      return final,forecast_index_d\n","\n","  ################ graphicall representation ########################\n","    y_pred_df=xtest_prediction(x_train,y_train,x_test,y_test)\n","    final,forecast_index_d=prediction(x_train,y_train,x_test,y_test)\n","    import plotly.graph_objects as go\n","\n","    data = go.Bar(\n","        x=feature,\n","        y=target,\n","        name='Actual',\n","        marker=dict(color='orange')\n","    )\n","\n","    pred = go.Bar(\n","        x=feature[11:],\n","        y=y_pred_df['pred'],\n","        name='Predicted',\n","        marker=dict(color='green')\n","    )\n","\n","    forecast = go.Bar(\n","        x=forecast_index_d,\n","        y=final['prediction'],\n","        name='Forecast',\n","        marker=dict(color='blue')\n","    )\n","\n","    layout = go.Layout(\n","        title='Predicted Prices Over Years',\n","        xaxis=dict(title='Year'),\n","        yaxis=dict(title='Sales'),\n","        showlegend=True,\n","        paper_bgcolor='black',\n","        plot_bgcolor='black'\n","    )\n","\n","    figure = go.Figure(data=[data, pred, forecast], layout=layout)\n","    figure.show()\n","\n","\n","  except Exception as e:\n","    print(\"Unable print the Sales Forecasting Report !!\",e)\n","#LSTM()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"executionInfo":{"elapsed":507,"status":"ok","timestamp":1704598917719,"user":{"displayName":"shivaprasad shetty","userId":"09720553218955927212"},"user_tz":-330},"id":"Pr-8hYtxQno3","outputId":"56f31961-b6de-4984-e934-d5c36ca58fff"},"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"fc0a1c78-021d-46d2-85a1-86b9ffdcca64\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"fc0a1c78-021d-46d2-85a1-86b9ffdcca64\")) {                    Plotly.newPlot(                        \"fc0a1c78-021d-46d2-85a1-86b9ffdcca64\",                        [{\"line\":{\"color\":\"blue\",\"width\":2},\"marker\":{\"color\":\"blue\",\"size\":8},\"mode\":\"markers\",\"name\":\"Motorcycle Scooter Price\",\"x\":[\"Bajaj Avenger 160\",\"Hero HF Deluxe Drum Self\",\"Hero HF Deluxe Self Start i3S\",\"Hero Super Splendor Drum\",\"Hero Super Splendor Disc\",\"Bajaj Dominar 400\",\"Bajaj Dominar 250\",\"Bajaj Pulsar F250\",\"Bajaj Pulsar N250\",\"Bajaj Pulsar RS 200 Twin Disc\",\"Bajaj Pulsar NS 200 Twin Disc\",\"Bajaj Pulsar NS 160 Twin Disc\",\"Bajaj Pulsar NS 125 Disc\",\"Bajaj Pulsar 150 Twin Disc\",\"Bajaj Pulsar 150 Single Disc\",\"Bajaj Pulsar 150 NEON\",\"Bajaj Pulsar 125 Disc Split Seat\",\"Hero HF Deluxe Self Start Black\",\"Hero HF Deluxe Drum KickTVS Radeon DT Drum\",\"TVS Radeon DT Drum\",\"Hero HF 100 Kick Drum Alloy\",\"TVS Radeon Base\",\"TVS Star City Plus Disc\",\"TVS Star City Plus Drum\",\"TVS Sport EST\",\"TVS Sport KS\",\"Hero Splendor iSmart Drum\",\"Hero Splendor iSmart Disc\",\"Hero Passion Pro Drum\",\"Hero Passion Pro Disc\",\"Hero Passion Pro Drum 100M\",\"Hero Passion Pro Disc 100M\",\"Hero Splendor Plus Drum Self\",\"Hero Splendor Plus i3S Drum Self\",\"Hero Splendor Plus i3S Matt Gold\",\"Hero Splendor Plus Black Accent\",\"Bajaj Pulsar 125 Disc Single Seat\",\"Bajaj Pulsar 125 Drum Split Seat\",\"Bajaj Pulsar 125 Drum Single Seat\",\"Bajaj Avenger 220\",\"Honda Livo Disc\",\"Honda Livo Drum\",\"CD110 Dream DLX\",\"Honda Grazia 125 Disc\",\"Honda Grazia 125 Drum\",\"Honda Activa 125 Disc\",\"Honda Activa 125 Alloy\",\"Honda Activa 125 Drum\",\"Honda Activa Premium Deluxe\",\"Honda Activa 6G DLX\",\"Honda Activa 6G STD\",\"Honda Dio Sports Drum\",\"Honda Dio Sports Drum\",\"Honda Dio DLX\",\"Honda Dio STD\",\"Honda CB Shine Drum\",\"Honda CB Shine Disc\",\"Honda SP125 Drum\",\"Honda CB 350 DLX PRO\",\"Bajaj Platina 110 ES Disc\",\"Bajaj Platina 110 ES Drum\",\"Bajaj Platina 100 ES Drum RUSHTANE\",\"Bajaj CT110X\",\"Honda CB350 RS Dual\",\"Honda CB350 RS Mono\",\"Honda CB 350 DLX\",\"Honda SP 125 Disc\",\"Honda CB 350 DLX\",\"Honda CB200X\",\"Honda Hornet\",\"X - Blade DX\",\"X - Blade\",\"Honda Unicorn\",\"TVS Radeon COTY Drum\",\"Hero Glamour X-Tec Disc\",\"TVS Radeon COTY Disc\",\"Hero Glamour Drum\",\"Hero Xpulse 200\",\"Hero Xpulse 200T\",\"Hero Xtreme 200S\",\"Hero Xtreme 160R Stealth\",\"Hero Xtreme 160R Double Disc\",\"Hero Xtreme 160R Disc\",\"Yamaha FZ-FI\",\"Yamaha FZS-FI\",\"Yamaha FZS - FI Deluxe\",\"Yamaha FZ-X\",\"TVS Radeon DT Disc\",\"Yamaha Bajaj FZ 25 Monster\",\"Yamaha FZS 25\",\"Yamaha MT-15 Blue\\u002fBlack\",\"Yamaha MT-15 Ice Fluo\",\"Yamaha Bajaj MT-15 Monster\",\"Yamaha R15S\",\"Yamaha R15 V3 Grey\\u002fRed\",\"Yamaha R15 V3 Blue\",\"Yamaha R15 V3 Dark Knight\",\"Yamaha R15 V4 Metallic Red\",\"Yamaha R15 V4 Dark Knight\",\"Yamaha R15 V4 Racing Blue\",\"Yamaha R15M V4 Metallic Grey\",\"Yamaha Bajaj R15M V4 Monster\",\"Hero XPulse 200 4V\",\"Yamaha FZ 25\",\"Hero Glamour Disc\",\"Hero Glamour Black & Accent Disc\",\"Raider Disc\",\"TVS RTR 160 2V ( Drum )\",\"TVS RTR 160 2V ( Disc )\",\"TVS RTR 160 4V ( Drum )\",\"TVS RTR 160 4V ( Disc )\",\"TVS RTR 160 4V ( Bluetooth )\",\"TVS Honda RTR 160 4V Special Edition\",\"TVS RTR 180\",\"TVS RTR 200 4V Single ABS\",\"TVS RTR 200 4V Dual ABS\",\"TVS Apache 310\",\"Hero Glamour X-Tec Drum\",\"TVS Raider Drum\",\"Hero New Glamour Disc\",\"Hero New Glamour Drum\",\"Hero Glamour 100M Disc\",\"Hero Glamour Black & Accent Drum\",\"Hero Glamour 100M Drum\",\"Hero Glamour Blaze Disc\",\"Hero Glamour Blaze Drum\",\"Honda Activa 6G STD\",\"Honda Activa 6G 20th AE STD\",\"Hero Glamour Blaze Drum\",\"Hero Glamour Disc\",\"Hero Glamour Drum\",\"Hero Xpulse 200\",\"Hero Xtreme 160R Disc\",\"Honda Activa 6G DLX\",\"Honda Activa 125 Disc\",\"Honda Activa 6G 20th AE DLX\",\"Honda Activa 125 Drum\",\"Honda Activa 125 Alloy\",\"Honda Splendor iSmart Drum\",\"Honda Grazia 125 Drum\",\"Honda Grazia 125 Disc\",\"Honda CD110 Dream STD\",\"Honda CD110 Dream DLX\",\"Hero Glamour Blaze Disc\",\"Hero Splendor Plus Kick Start\",\"Honda Splendor iSmart Disc\",\"Hero Passion Pro Drum\",\"Hero HF Deluxe Self Start i3S Black\",\"Honda Super Splendor Drum\",\"Honda Super Splendor Disc\",\"Honda Livo Disc\",\"Honda Dio STD\",\"Honda Dio DLX\",\"Honda Dio Repsol\",\"Hero HF Deluxe Self Start i3S\",\"Hero HF Deluxe Self Start\",\"Hero HF Deluxe Kick Start\",\"Hero HF Deluxe Spoke Wheel\",\"Honda Splendor Plus Black Accent\",\"Hero Slendor Plus i3S\",\"Hero Slendor Plus Self Start\",\"Hero Passion Pro Disc\",\"Honda Livo Drum BUSHLANE\",\"Yamaha R15M V4 Monster\",\"Honda CB Shine Drum\",\"TVS Radeon Base\",\"TVS Apache 310\",\"TVS RTR 200 4V Dual ABS\",\"TVS RTR 200 4V Single ABS\",\"TVS RTR 180\",\"TVS  RTR 160 4V Special Edition\",\"TVS RTR 160 4V ( Bluetooth )\",\"TVS RTR 160 4V ( Disc )\",\"TVS RTR 160 4V ( Drum )\",\"TVS RTR 160 2V ( Disc )\",\"TVS RTR 160 2V ( Drum )\",\"TVS Raider Disc\",\"TVS Raider Drum\",\"TVS Radeon DT Disc\",\"TVS Radeon COTY Disc\",\"TVS Radeon DT Drum\",\"Yamaha FZ - FI\",\"Yamaha FZS - FI\",\"Yamaha FZS - FI Deluxe\",\"Yamaha R15 V3 Grey \\u002f Red\",\"Yamaha R15M V4 Metallic Grey\",\"Yamaha R15 V4 Racing Blue\",\"Yamaha R15 V4 Dark Knight\",\"Yamaha R15 V4 Metallic Red\",\"Yamaha R15 V3 Dark Knight\",\"Yamaha R15 V3 Blue\",\"Yamaha R15S\",\"Yamaha FZ - X\",\"Yamaha MT15 Monster\",\"Yamaha MT15 Ice Fluo\",\"Yamaha MT15 Blue \\u002f Black\",\"Yamaha FZS 25\",\"Yamaha Bajaj FZ 25 Monster\",\"Yamaha FZ 25\",\"TVS Radeon COTY Drum\",\"TVS Star City Plus Disc\",\"Honda CB Shine Disc\",\"Honda CB 350 DLX\",\"Bajaj Avenger 160\",\"Bajaj Platina 110 ES Disc\",\"Bajaj Platina 110 ES Drum\",\"Bajaj Platina 100 ES Drum RUSHTANE\",\"Bajaj CT110X\",\"Honda CB 350 DLX PRO\",\"Honda Hornet Repsol\",\"TVS Star City Plus Drum\",\"Honda Hornet\",\"Hero X - Blade Rear Disc\",\"Hero X - Blade Disc\",\"Honda Unicorn\",\"Honda SP 125 Disc\",\"Honda SP125 Drum\",\"Bajaj Avenger 220\",\"Bajaj Pulsar 125 Drum Single Seat\",\"Honda Bajaj Pulsar 125 Drum Split Seat\",\"Bajaj Pulsar 125 Disc Single Seat\",\"TVS Sport ES\",\"TVS Sport KS\",\"Bajaj Dominar 400\",\"Bajaj Dominar 250\",\"Bajaj Pulsar F250\",\"Bajaj Pulsar N250\",\"Bajaj Pulsar RS 200 Twin Disc\",\"Bajaj Pulsar NS 200 Twin Disc\",\"Bajaj Pulsar NS 160 Twin Disc\",\"Bajaj Pulsar NS 125 Disc\",\"Bajaj Pulsar 150 Twin Disc\",\"Bajaj Pulsar 150 Single Disc\",\"Bajaj Pulsar 150 NEON\",\"Bajaj Pulsar 125 Disc Split Seat\",\"Hero Xtreme 160R Drum\",\"Royal Enfield Classic Gunmetal Grey\",\"Royal Enfield Classic 350\",\"Jawa 42\",\"Bajaj KTM RC 200\",\"Bajaj Dominar 400\",\"Royal Enfield Classic 350\",\"Bajaj KTM 125 Duke\",\"Honda CBR-250R\",\"Honda Dream Yuga\",\"TVS Apache RTR 160\",\"TVS Apache RTR 200 4V\",\"Hero Glamour FI\",\"Yamaha YZF R15 V3\",\"Bajaj Avenger Street 160\",\"Bajaj Pulsar 220F\",\"Bajaj CT 100\",\"Yamaha Fascino 110\",\"Honda Activa 5G\",\"Honda Activa 5G\",\"TVS Apache RTR 160 4V\",\"TVS Apache RTR 160 4V\",\"Bajaj Pulsar 220F\",\"Yamaha Saluto\",\"Yamaha FZ25\",\"Royal Enfield Interceptor 650\",\"Bajaj KTM RC200\",\"Yamaha FZ S V 2.0\",\"Jawa Standard\",\"Royal Enfield Thunderbird 350X\",\"Honda Activa 5G\",\"Yamaha YZF R3\",\"honda Activa 4G\",\"Honda CB Shine SP\",\"Hero Xpulse 200\",\"Yamaha FZ25\",\"Bajaj KTM RC 200\",\"UM Renegade Mojave\",\"TVS Apache RTR 200 4V\",\"Bajaj Pulsar 180F\",\"Hero Slendor Plus i3s\",\"Bajaj Avenger Street 160\",\"Hero Xpulse 200T\",\"Bajaj Pulsar 150\",\"Hero Xtreme 200R\",\"TVS Apache RTR 160\",\"Hero Passion Pro 110\",\"Hero Xpulse 200\",\"Suzuki Gixxer SF Fi\",\"Bajaj Avenger 220\",\"Royal Enfield Interceptor 650\",\"Yamaha Fascino 110\",\"Yamaha FZ25\",\"Jawa Standard\",\"TVS Apache RR310\",\"Royal Enfield Interceptor 650\",\"Bajaj Pulsar 125\",\"Suzuki GSX S750\",\"Hero HF Deluxe i3s\",\"Bajaj KTM RC 390\",\"Bajaj Dominar 400\",\"Bajaj Avenger 220\",\"Royal Enfield Classic 350\",\"Honda CB Hornet 160R\",\"Hero Xpulse 200\",\"Yamaha FZ S V 2.0\",\"Honda CB Hornet 160R\",\"Bajaj KTM 250 Duke\",\"Royal Enfield Classic 350\",\"TVS Apache RTR 160\",\"TVS  Vespa SXL 149\",\"Bajaj Platina 100\",\"Honda Activa 4G\",\"Royal Enfield Thunderbird 350X\",\"Honda Activa 5G\",\"Hero Slendor Plus i3s\",\"Honda Activa 5G\",\"Honda CB Hornet 160R\",\"Yamaha Cygnus Ray ZR\",\"Bajaj Pulsar 150\",\"Hero HF Deluxe\",\"Royal Enfield Thunderbird 350X\",\"Honda TVS Sport\",\"Honda Dream Yuga\",\"Honda Activa 4G\",\"Royal Enfield Continental GT 650\",\"Honda Activa 5G\",\"Piaggio Aprilia SR 125\",\"Bajaj Pulsar 150\",\"TVS XL 100 Heavy Duty\",\"Bajaj V15\",\"Honda Dream Yuga\",\"Yamaha FZ S V 2.0\",\"Bajaj Dominar 400\",\"Bajaj Pulsar 180\",\"Hero Maestro Edge\",\"Suzuki Access 125\",\"Hero Passion XPro\",\"Royal Enfield Classic 350\",\"Bajaj CT 100\",\"Honda Grazia\",\"Royal Enfield Thunder 500\",\"Honda Activa 5G\",\"Yamaha FZ V 2.0\",\"Bajaj Avenger Cruise 220\",\"Bajaj Avenger 150 Street\",\"TVS Apache RTR 200 4V\",\"Bajaj KTM 200 Duke\",\"Hero X-Blade\",\"Yamaha Fazer FI V 2.0\",\"Suzuki Access 125\",\"Honda Activa 5G\",\"Honda TVS Sport\",\"Honda CB Shine SP\",\"Royal Enfield Classic Signals\",\"Hero HF Deluxe\",\"Yamaha FZ v 2.0\",\"Bajaj Pulsar 220 F\",\"Hero Glamour 125\",\"Royal Enfield Classic 350\",\"Bajaj Pulsar NS160\",\"UM Renegade Commando\",\"Bajaj Discover 125\",\"Royal Enfield Classic Gunmetal Grey\",\"Hero HF Deluxe\",\"Aprilia SR 125\",\"TVS Jupiter\",\"TVS Honda Vespa SXL 149\",\"Royal Enfield Thunderbird 350X\",\"TVS Apache RTR 160 4V\",\"Royal Enfield Classic Gunmetal Grey\",\"Yamaha FZ25\",\"Honda Hero Splender iSmart\",\"Suzuki Intruder 150\",\"Royal Enfield Classic Gunmetal Grey\",\"Honda Activa 125\",\"Yamaha Fazer 25\",\"Hero Passion X pro\",\"Royal Enfield Classic Gunmetal Grey\",\"Bajaj Avenger Street 220\",\"Hero Passion Pro\",\"Honda Aviator\",\"Royal Enfield Bullet 350\",\"Yamaha FZ S V 2.0\",\"TVS Scooty Zest 110\",\"Royal Enfield Thunderbird 350X\",\"Honda Activa 5G\",\"Hero HF Deluxe\",\"TVS Apache RTR 160 4V\",\"Bajaj KTM 390 Duke\",\"TVS Apache RTR 160 4V\",\"Bajaj KTM 390 Duke\",\"Honda CB Hornet 160R\",\"TVS Apache RTR 160\",\"Hero Xtreme 200R\",\"Bajaj Avenger Street 220\",\"Royal Enfield Classic Gunmetal Grey\",\"Hero Slendor Plus\",\"Suzuki Intruder 150\",\"Honda Dio\",\"Yamaha YZF R15 S\",\"Royal Enfield Thunderbird 500X\",\"TVS Apache RTR 200 4V\",\"Suzuki Gixxer SF\",\"Bajaj Pulsar NS160\",\"Honda Activa 5G\",\"Bajaj Pulsar NS200\",\"Royal Enfield Thunderbird 350X\",\"Yamaha FZ25\",\"Royal Enfield Classic Gunmetal Grey\",\"Honda Activa 4G\",\"Yamaha Fazer 25\",\"Yamaha Fazer 25\",\"Honda Activa 125\",\"Royal Enfield Thunderbird 350\",\"Hero HF Deluxe\",\"Bajaj Pulsar NS200\",\"Bajaj Pulsar 220F\",\"Honda Splendor Plus\",\"Bajaj Pulsar NS200\",\"TVS Wego\",\"Bajaj V15\",\"TVS Apache RTR 200 4V\",\"Royal Enfield Classic 350\",\"Royal Enfield Classic 350\",\"Yamaha YZF R15 V3\",\"Royal Enfield Classic 350\",\"Yamaha FZ S V 2.0\",\"Hero Passion PRO i3s\",\"Suzuki Intruder 150 Fi\",\"Honda Activa 5G\",\"Bajaj Platina 100\",\"Honda CB Hornet 160R\",\"Hero  Passion Plus\",\"Bajaj Avenger Cruise 220\",\"Bajaj Discover 125\",\"TVS Apache RTR 200 4V\",\"Yamaha Saluto\",\"Bajaj Pulsar RS200\",\"Bajaj Platina 100\",\"Honda Livo\",\"Royal Enfield Thunder 350\",\"Honda Livo\",\"Hero Glamour Fi\",\"Bajaj Pulsar NS160\",\"Hero Maestro Edge\",\"Bajaj KTM RC200\",\"Bajaj Avenger 220\",\"Bajaj Dominar 400\",\"Honda TVS Sport\",\"Bajaj Avenger Street 220\",\"Royal Enfield Thunder 350\",\"Honda Activa 5G\",\"Honda CB Hornet 160R\",\"Bajaj Pulsar 135 LS\",\"Bajaj Avenger 150\",\"Bajaj Platina 100\",\"Mahindra Mojo XT300\",\"BMW G310GS\",\"Royal Enfield Classic Stealth Black\",\"Royal Enfield Thunderbird 350X\",\"Bajaj Pulsar 150\",\"Hero Glamour 125\",\"Bajaj KTM 390 Duke\",\"Royal Enfield Thunderbird 350\",\"Honda CB Shine SP\",\"Honda  Xtreme Sports\",\"Yamaha FZ S V 2.0\",\"Benelli TNT 25\",\"Honda Activa 125\",\"Honda Dream Yuga\",\"Hero HF Deluxe\",\"TVS Radeon\",\"Honda CBR150R\",\"Honda Dream Neo\",\"Royal Enfield Classic 350\",\"Royal Enfield Thunderbird 350\",\"Bajaj Avenger Street 150\",\"Honda CB Unicorn 150\",\"Hero Passion PRO i3s\",\"Suzuki Gixxer\",\"Honda Hero Splender iSmart\",\"Bajaj Pulsar 150\",\"Bajaj KTM RC 390\",\"Honda Shine\",\"Honda CB Hornet 160R\",\"Hero Maestro Edge\",\"Bajaj Pulsar 150\",\"Mahindra Mojo XT300\",\"Bajaj KTM RC 200\",\"Yamaha Saluto RX\",\"Honda Activa 125\",\"Bajaj Pulsar 150\",\"Bajaj Pulsar 135 LS\",\"Bajaj Dominar 400\",\"Bajaj Avenger 220 dtsi\",\"TVS XL 100\",\"Royal Enfield Himalayan\",\"Royal Enfield Classic Squadron Blue\",\"Suzuki Gixxer\",\"Honda Hero Super Splendor\",\"Bajaj Pulsar 220F\",\"Honda CB Hornet 160R\",\"TVS Star City Plus\",\"Yamaha YZF R15\",\"Bajaj KTM RC390\",\"Honda Activa 125\",\"Hero Duet\",\"Bajaj Pulsar AS150\",\"Yamaha FZ S V 2.0\",\"Royal Enfield Classic 350\",\"Hero Passion PRO i3s\",\"Honda CB Unicorn\",\"Hero Slendor iSmart\",\"Bajaj V12\",\"Kawasaki Ninja 650\",\"Hero Maestro Edge\",\"Royal Enfield Classic Desert Storm\",\"Yamaha FZ 16\",\"Bajaj KTM RC 390\",\"Hero Glamour 125\",\"Royal Enfield Classic 350\",\"Bajaj KTM 390 Duke\",\"TVS Apache RTR 200 4V\",\"Royal Enfield Thunderbird 350\",\"Suzuki Access 125\",\"Royal Enfield Classic 350\",\"Hero Passion Pro\",\"Hero Passion Pro\",\"Honda Activa i\",\"Hero Glamour 125\",\"TVS Apache RTR 160\",\"Yamaha FZ25\",\"Honda CB Unicorn 150\",\"Yamaha FZ S V 2.0\",\"Yamaha FZ v 2.0\",\"Honda CB Shine SP\",\"Bajaj CT 100\",\"Bajaj Dominar 400\",\"Yamaha FZ S V 2.0\",\"Honda Dream Yuga\",\"TVS Apache RTR 160\",\"Honda CB Hornet 160R\",\"Honda CB Hornet 160R\",\"Hero Achiever 150\",\"Royal Enfield Classic 350\",\"UM Renegade Commando\",\"Suzuki Access 125\",\"Royal Enfield Thunder 500\",\"Honda CB Shine SP\",\"Honda CB Unicorn 150\",\"Honda CB Shine SP\",\"TVS Star City Plus\",\"Royal Enfield Classic 350\",\"Honda CB Hornet 160R\",\"Honda CB Hornet 160R\",\"Bajaj Pulsar RS 200\",\"Bajaj V15\",\"Royal Enfield Classic 350\",\"Royal Enfield Classic 350\",\"Bajaj KTM 200 Duke\",\"Honda Dio\",\"Yamaha FZ S V 2.0\",\"Suzuki Access 125\",\"Bajaj KTM RC 200\",\"Yamaha Ray Z\",\"Honda Hero Super Splendor\",\"Bajaj CT 100\",\"Yamaha Ray Z\",\"Honda CB Hornet 160R\",\"Bajaj Pulsar 180\",\"Honda Navi\",\"Bajaj Avenger Street 150\",\"Yamaha FZ25\",\"Royal Enfield Classic 350\",\"Honda Dio\",\"Yamaha YZF R15S\",\"Bajaj CT 100\",\"Yamaha YZF R15\",\"Hero Passion PRO i3S\",\"Bajaj Pulsar 180\",\"TVS Scooty Zest 110\",\"Bajaj KTM 250 Duke\",\"Yamaha FZ-S V2.0\",\"Honda Livo\",\"Honda CB Hornet 160R\",\"Royal Enfield Classic 350\",\"Honda CB Hornet 160R\",\"Honda CB Hornet 160R\",\"Bajaj Pulsar 150\",\"Honda Shine\",\"Bajaj Pulsar 135 LS\",\"Honda CB Hornet 160R\",\"Honda CB Hornet 160RB\",\"Bajaj Discover 125\",\"Yamaha Fascino 110\",\"Mahindra Gusto\",\"Honda Livo\",\"Bajaj V15\",\"Bajaj Avenger Street 150\",\"Yamaha YZF R15S\",\"Yamaha Fazer\",\"TVS Star City\",\"Suzuki Gixxer SF\",\"Honda Activa 3G\",\"Honda Activa i\",\"Hero Slendor PRO\",\"Honda Activa 3G\",\"Hero Ignitor\",\"Royal Enfield Thunderbird 350\",\"Honda Navi\",\"Hero Extreme\",\"Honda CB Unicorn 150\",\"Hero Glamour 125\",\"Hero Passion X Pro\",\"Hero Maestro\",\"Honda CB Hornet 160R\",\"Honda CB Shine SP\",\"Bajaj V15\",\"Bajaj Pulsar 220F\",\"Honda Activa 3G\",\"Hero Xtreme Sports\",\"Honda Activa 3G\",\"Bajaj Pulsar NS 200\",\"Hero Xtreme Sports\",\"Hero HF Deluxe\",\"Bajaj Avenger Street 220\",\"Honda Navi\",\"Honda CB Hornet 160R\",\"Honda Activa 3G\",\"TVS Apache RTR 180\",\"Kawasaki Ninja 300\",\"Royal Enfield Thunderbird 350\",\"Bajaj KTM 200 Duke\",\"Honda CB Unicorn 160\",\"Bajaj Avenger Cruise 220\",\"Honda CBR-250R\",\"Hero Ignitor\",\"TVS Star City Plus\",\"Bajaj Avenger Street 150\",\"Bajaj Pulsar 180\",\"Hero Duet\",\"Yamaha FZ-S\",\"Honda CB Shine SP\",\"Bajaj Avenger Street 220\",\"Hero CD Deluxe\",\"Bajaj Pulsar 150\",\"TVS Apache RTR 160\",\"Bajaj Pulsar 220F\",\"Yamaha FZ16\",\"Hero Achiever 150\",\"Hero Achiever 150\",\"Honda Activa 125\",\"Royal Enfield Bullet 350\",\"Suzuki Gixxer\",\"Bajaj V15\",\"Hero Duet\",\"Bajaj Avenger Street 150\",\"Bajaj Avenger Cruise 220\",\"Honda Navi\",\"Bajaj Discover 125\",\"Bajaj Avenger Street 150\",\"Hyosung GT250R\",\"Honda Shine\",\"Yamaha YZF-R15S\",\"Yamaha FZ16\",\"Honda Hero Super Splendor\",\"Bajaj Avenger Street 150\",\"Honda CB Hornet 160R\",\"Bajaj Discover 125\",\"TVS Jupiter\",\"Honda CB Unicorn 150\",\"Bajaj Avenger Street 220\",\"Hero Maestro\",\"Bajaj CT 100\",\"Honda CB Hornet 160R\",\"Bajaj Avenger Street 150\",\"Hero Duet\",\"Hero Passion X Pro\",\"Yamaha FZ16\",\"Yamaha FZ V 2.0\",\"Bajaj KTM 390 Duke\",\"Hero Passion PRO i3s\",\"Honda Bajaj Royal Enfield Electra Twinspark\",\"TVS Apache RTR 160\",\"Hero Glamour 125\",\"Royal Enfield Classic 350\",\"Bajaj V15\",\"Honda CB Hornet 160R\",\"Royal Enfield Himalayan\",\"Yamaha FZ16\",\"Bajaj V15\",\"Honda Dio\",\"Bajaj Pulsar 135 LS\",\"Royal Enfield Thunderbird 350\",\"Yamaha FZ S V 2.0\",\"Bajaj Avenger Street 150\",\"Bajaj Avenger Street 150\",\"Hero Hunk\",\"Yamaha Fascino 110\",\"Honda CBR 150\",\"Honda CB Twister\",\"Bajaj Pulsar AS200\",\"Royal Enfield Classic 350\",\"Bajaj Discover 150S\",\"Suzuki Gixxer\",\"Hero Extreme\",\"Honda CB Trigger\",\"Royal Enfield Classic 350\",\"Royal Enfield Classic Desert Storm\",\"Royal Enfield Thunderbird 350\",\"Hero Slendor PRO\",\"Hero Ignitor Disc\",\"Hero Slendor PRO\",\"Hero Maestro\",\"Bajaj Pulsar RS 200\",\"Bajaj Discover 100\",\"Hero Slendor PRO\",\"Hero Glamour 125\",\"Mahindra Gusto\",\"Honda Activa 3G\",\"Honda Dream Yuga\",\"Yamaha Saluto\",\"Bajaj Pulsar 135 LS\",\"Bajaj CT 110\",\"Honda CB Unicorn 160\",\"Bajaj Discover 150F\",\"Royal Enfield Bullet 350\",\"Honda Activa 3G\",\"Royal Enfield Classic Chrome\",\"Yamaha Fazer FI V 2.0\",\"Bajaj Pulsar 150\",\"Honda CB Twister\",\"Honda Dream Yuga\",\"Honda Activa 3G\",\"Royal Enfield Thunderbird 350\",\"Suzuki Access 125\",\"Hero Maestro Edge\",\"Hero Slendor iSmart\",\"Honda Shine\",\"Hero Slendor Plus\",\"Bajaj KTM 390 Duke ABS\",\"Honda Activa 3G\",\"Bajaj Pulsar AS200\",\"Bajaj Pulsar 180\",\"Yamaha SZ RR V 2.0\",\"Hero Karizma ZMR\",\"Bajaj Pulsar 150\",\"Yamaha FZ16\",\"Honda Activa\",\"Honda CBR 150\",\"Bajaj KTM 390 Duke ABS\",\"Yamaha FZ S V 2.0\",\"Royal Enfield Bullet 500\",\"Honda Activa 3G\",\"Royal Enfield Thunderbird 350\",\"Royal Enfield Thunder 350\",\"Yamaha FZ S V 2.0\",\"Honda Vespa LX 125\",\"Bajaj Avenger Street 150\",\"Suzuki Gixxer\",\"Royal Enfield Thunderbird 350\",\"Hero Karizma ZMR\",\"Hero Glamour 125\",\"Honda CB Trigger\",\"Bajaj Discover 150S\",\"Honda CB Unicorn 160\",\"Honda Livo\",\"Bajaj Pulsar 220S\",\"Yamaha FZ S V 2.0\",\"Hero Slendor Plus\",\"Honda CB Trigger\",\"Bajaj Pulsar 150\",\"Bajaj Pulsar NS 200\",\"Honda Activa i\",\"Bajaj Pulsar AS200\",\"Royal Enfield Classic Desert Storm\",\"Bajaj V15\",\"Honda Activa 3G\",\"TVS Scooty Zest 110\",\"Bajaj Discover 100\",\"Royal Enfield Classic Chrome\",\"Hero Slendor iSmart\",\"Bajaj Pulsar AS150\",\"Bajaj Pulsar AS200\",\"Honda Activa 3G\",\"Royal Enfield Thunder 500\",\"Yamaha Ray Z\",\"Yamaha Alpha\",\"Honda Activa 3G\",\"Hero Honda Hunk\",\"Honda CB Trigger\",\"Yamaha FZ S\",\"Hero Slendor PRO\",\"Honda Activa 3G\",\"Bajaj Avenger Street 150\",\"Honda CB Shine SP\",\"Royal Enfield Classic 350\",\"Honda CB Shine\",\"Hero Honda Hunk\",\"Bajaj KTM RC 200\",\"Honda Activa\",\"Bajaj Discover 125M\",\"Bajaj Pulsar 220 DTS-i\",\"Hero Xtreme\",\"Honda Activa\",\"Yamaha FZ S\",\"TVS Apache RTR 160\",\"Bajaj Pulsar 150\",\"Honda Dio\",\"Bajaj Discover 125M\",\"Bajaj Discover 150\",\"Bajaj Pulsar 135 LS\",\"Yamaha FZ S\",\"Suzuki Let's\",\"Bajaj Discover 150S\",\"TVS Apache RTR 160\",\"Honda Hero CBZ\",\"Bajaj Discover 100\",\"Bajaj Discover 100 T\",\"Honda Hero Super Splendor\",\"Honda CB Twister\",\"Bajaj Discover 100 M\",\"Hero Hunk\",\"Bajaj Discover 100\",\"Hero Passion PRO\",\"Yamaha YZF R15\",\"Hero Xtreme\",\"Bajaj Discover 150F\",\"Yamaha SZ-S\",\"Honda Activa\",\"Hero Xtreme Sports\",\"Hero Karizma\",\"Bajaj Pulsar 180\",\"Honda Shine\",\"Hero HF Deluxe\",\"Royal Enfield Classic 500\",\"Bajaj Pulsar NS 200\",\"Hero CD Dawn\",\"Honda Shine\",\"Suzuki Swish\",\"Yamaha FZ V 2.0\",\"Honda Activa\",\"Yamaha Fazer\",\"Yamaha FZ V 2.0\",\"TVS Star City Plus\",\"Honda CB Unicorn 150\",\"Honda Dio\",\"Honda Shine\",\"Bajaj Discover 125\",\"Bajaj Pulsar 180\",\"Bajaj Avenger\",\"Yamaha FZ S\",\"Hero CD Deluxe\",\"Honda Aviator\",\"TVS Honda Dream Neo\",\"Royal Enfield Thunderbird 500\",\"Hero Pleasure\",\"Bajaj Pulsar NS 200\",\"Royal Enfield Bullet 350\",\"Honda CB Unicorn 150\",\"Hero Glamour 125\",\"Honda CBR-250R\",\"Yamaha Honda CBR150 R\",\"Honda Dream Neo\",\"Honda CB Trigger\",\"Hero Hero Xtreme Sports\",\"Hero Glamour FI\",\"Honda Dream Yuga\",\"Hero Ignitor\",\"Honda CBF Stunner\",\"Harley-Davidson Street 750\",\"Royal Enfield Electra Twinspark\",\"Royal Enfield Thunderbird 350\",\"Hero Passion PRO\",\"Yamaha YBR 125\",\"Honda Activa i\",\"Honda CB Unicorn 150\",\"Hero Karizma 2014\",\"Yamaha FZ S V 2.0\",\"Royal Enfield Classic 350\",\"Honda Activa 125\",\"Bajaj Pulsar 150\",\"Hero CD Deluxe\",\"Honda Activa\",\"Royal Enfield Thunderbird 350\",\"Royal Enfield Continental GT\",\"Honda Activa 125\",\"Honda CBR-250R\",\"Hero Honda Passion Pro\",\"Hero Slendor Plus\",\"Honda Dio\",\"Hero Hunk\",\"Harley-Davidson Street Bob\",\"Hero Passion Pro 110\",\"Honda Shine\",\"Hero Xtreme\",\"Bajaj Discover 125 ST\",\"Bajaj Pulsar 150\",\"Bajaj Pulsar 220 DTS-i\",\"Bajaj Discover 125\",\"Bajaj Pulsar 150\",\"Honda CB Unicorn 150\",\"Hero Slendor Plus\",\"Hero Pleasure\",\"Honda CB Unicorn 150\",\"Honda Karizma\",\"Bajaj Discover 100 T\",\"Honda Activa\",\"Honda Karizma\",\"Yamaha YZF R15\",\"Yamaha Fazer\",\"Honda Karizma\",\"Honda Dream Yuga\",\"Honda CB Trigger\",\"Bajaj Pulsar 180\",\"Bajaj Avenger Street 220\",\"Yamaha Fazer\",\"Royal Enfield Thunder 350\",\"Bajaj Discover 125\",\"Yamaha YZF R15\",\"Bajaj KTM 200 Duke\",\"Royal Enfield Classic 500\",\"Honda CB Unicorn 150\",\"Royal Enfield Classic 350\",\"Hero Pleasure\",\"Honda Activa i\",\"Honda Aviator\",\"Hero Karizma\",\"Royal Enfield Thunderbird 350\",\"Bajaj Discover 125\",\"Hero Pleasure\",\"Honda CBF Stunner\",\"TVS Apache RTR 160\",\"Honda Vespa VX 125\",\"Honda CB Twister\",\"Bajaj Discover 100 T\",\"Hero Passion Pro 110\",\"Bajaj Pulsar 150\",\"Hero Maestro\",\"Bajaj Royal Enfield Electra 4S\",\"Hero Xtreme\",\"Hero Passion XPro\",\"Hero Glamour 125\",\"Honda Hero Super Splendor\",\"Bajaj Platina 100\",\"Hero Slendor Plus\",\"Hero Pleasure\",\"Hero Xtreme\",\"Hero Glamour 125\",\"Yamaha YBR 125\",\"TVS Apache RTR 180\",\"Honda Aviator\",\"Hero Karizma\",\"Bajaj Platina 100\",\"Honda Hero Honda CBZ extreme\",\"Yamaha FZ S\",\"Bajaj Pulsar NS200\",\"Yamaha FZ S\",\"Hero Honda Hunk\",\"Bajaj Pulsar 220 Fi\",\"Mahindra Rodeo\",\"Bajaj Discover 100 T\",\"Yamaha Fazer\",\"Honda Activa\",\"Bajaj Pulsar 150\",\"Honda Activa\",\"Honda Aviator\",\"Hero Honda Passion PRO\",\"Bajaj Platina 100\",\"Suzuki Access 125\",\"Honda CB Twister\",\"Suzuki Access 125\",\"Honda Dream Yuga\",\"Suzuki Access 125\",\"Honda Hero Super Splendor\",\"TVS Wego\",\"Hero Karizma ZMR\",\"Honda Hero Honda Splendor Plus\",\"Hero Honda Passion PRO\",\"Hero Honda Glamour\",\"Bajaj Pulsar 180\",\"Hero Honda Karizma ZMR\",\"Bajaj Pulsar 180\",\"Hero Honda CD Deluxe\",\"Honda Hero Honda CBZ extreme\",\"Honda Activa\",\"Yamaha YZF R15\",\"Bajaj Discover 125\",\"Hero Honda CD Deluxe\",\"Hero Honda Passion PRO\",\"Bajaj Pulsar 150\",\"Bajaj Royal Enfield Electra 5S\",\"Avenger\",\"Yamaha Fazer\",\"Suzuki GS150R\",\"Honda CB Twister\",\"Bajaj Discover 150\",\"Royal Enfield Electra 5S\",\"Bajaj Platina 100\",\"TVS Scooty Pep DLX\",\"Honda Activa\",\"Royal Enfield Thunderbird 350\",\"Honda CB Unicorn 150\",\"Bajaj Avenger 220 DTSi\",\"Bajaj Discover 100\",\"Bajaj Discover 100\",\"Honda Activa\",\"Hero Pleasure\",\"Honda Shine\",\"Yamaha SZ-X\",\"Hero Glamour\",\"Yamaha Fazer-DLX\",\"Yamaha FZ-S\",\"Bajaj Pulsar 150\",\"Hero Karizma\",\"Hero Splendor Pro\",\"Bajaj Pulsar 150\",\"Royal Enfield Classic Desert Storm\",\"Bajaj Pulsar 150\",\"Hero Passion XPro\",\"Honda Activa\",\"Bajaj Pulsar NS200\",\"Bajaj Discover 100\",\"Yamaha Fazer\",\"Royal Enfield Thunderbird 350\",\"Hero Honda Splendor NXG\",\"Bajaj Discover 125 ST\",\"Bajaj Pulsar 220 Fi\",\"Hero Honda Glamour\",\"Bajaj Pulsar 220 F\",\"Bajaj Pulsar 180\",\"TVS Scooty Pep Plus\",\"Honda CB Twister\",\"Hero Slender Plus\",\"Royal Enfield Classic 500\",\"Bajaj Pulsar 220F\",\"Bajaj Pulsar 150\",\"Kawasaki Ninja 650\",\"Yo Style\",\"Honda Shine\",\"Bajaj Pulsar 135 LS\",\"TVS Scooty Pep Plus\",\"Hero Honda Passion PRO\",\"TVS Wego\",\"Yamaha FZ-S\",\"Bajaj Discover 125\",\"Bajaj Pulsar 135 LS\",\"Honda CB Unicorn Dazzler\",\"Honda CB Unicorn Dazzler\",\"Yamaha YZF R15\",\"Hero Honda Passion PRO\",\"Bajaj Discover 150\",\"Bajaj Discover 125\",\"Bajaj Pulsar 150\",\"Bajaj Pulsar 150\",\"Hero Honda CD Deluxe\",\"Bajaj Pulsar 150\",\"Yamaha SZ-X\",\"Honda CBR-250R\",\"Hero Glamour 125\",\"Bajaj Discover 100\",\"Bajaj Discover 100\",\"Honda CB Unicorn Dazzler\",\"Honda Activa 3G\",\"Bajaj Discover 125\",\"Hero Splendor NXG\",\"TVS Star City\",\"Bajaj Avenger\",\"Bajaj Discover 150\",\"Suzuki Access 125\",\"Bajaj Avenger\",\"Bajaj Pulsar 150\",\"Suzuki SlingShot\",\"Honda Hero Super Splendor\",\"Yamaha Fazer\",\"Bajaj Discover 125\",\"Honda Shine\",\"Honda Activa\",\"Bajaj Pulsar 180\",\"Hero Honda Passion PRO\",\"Hero Honda CBZ Extreme\",\"Bajaj Pulsar 220F\",\"Hero Honda CBZ Extreme\",\"Yamaha FZ-S\",\"Bajaj Pulsar 220 DTS-i\",\"Yamaha FZ16\",\"Bajaj Pulsar 150\",\"Hero Honda Karizma\",\"Bajaj Discover 125\",\"TVS Apache RTR 160\",\"TVS Wego\",\"Hero Honda CBZ Xtreme\",\"Bajaj Discover 100 M\",\"Hero Splendor PRO\",\"Royal Enfield Bullet 350\",\"Honda Hero CBZ Xtreme\",\"Honda Activa\",\"Hero Hunk\",\"TVS Scooty Pep Plus\",\"Bajaj Pulsar 150\",\"Yamaha YZF R15S\",\"Bajaj Pulsar 150\",\"Suzuki Access 125\",\"Bajaj Pulsar 150\",\"Bajaj Discover 100\",\"Bajaj Royal Enfield Electra 5S\",\"Bajaj Pulsar 150\",\"TVS Flame\",\"Hero Honda Pleasure\",\"Bajaj Discover 135\",\"Bajaj Discover 135\",\"Bajaj Pulsar 150\",\"Hero Slendor Plus\",\"Honda Shine\",\"Honda Activa\",\"Hero Honda CBZ Extreme\",\"Bajaj Discover 100\",\"Honda Hero CBZ\",\"Bajaj Pulsar 135 LS\",\"Bajaj Pulsar 150\",\"Honda Shine\",\"Honda CB Unicorn Dazzler\",\"Honda CB Unicorn 150\",\"Hero Honda Karizma ZMR\",\"Bajaj Pulsar 180\",\"Honda Activa 3G\",\"Bajaj Pulsar 150\",\"Bajaj Pulsar 135 LS\",\"Hero Karizma ZMR\",\"Bajaj Pulsar 135 LS\",\"Yamaha FZ16\",\"Bajaj Pulsar 135 LS\",\"Hero Honda Hunk\",\"Honda Dio\",\"Honda CB Twister\",\"Honda Hero Honda Splendor Plus\",\"Bajaj Pulsar 135 LS\",\"Honda Shine\",\"Hero Honda Hunk\",\"Honda CB Unicorn\",\"Hero Honda CD Deluxe\",\"Hero Honda Hunk\",\"Bajaj Avenger\",\"Hero Honda CBZ Extreme\",\"Royal Enfield Thunderbird 350\",\"Suzuki Access 125\",\"Suzuki GS150R\",\"Hero Honda CBZ Xtreme\",\"Bajaj Pulsar 150\",\"Bajaj Pulsar 150\",\"Hero Honda Glamour\",\"Kawasaki Ninja 250R\",\"Hero Honda Passion Plus\",\"Yamaha SZ-X\",\"Hero Honda Splendor Plus\",\"Yamaha FZ16\",\"Hero Honda CBZ Extreme\",\"Hero Honda Hunk\",\"Yamaha FZ16\",\"Hero Honda CD Deluxe\",\"Honda Dio\",\"Hero Hunk\",\"Hero Honda Splendor NXG\",\"Honda Activa\",\"TVS Scooty Streak\",\"Mahindra Flyte\",\"Yamaha Gladiator\",\"Honda Activa\",\"Honda CB Shine\",\"Honda Activa\",\"Bajaj Pulsar 180\",\"TVS Streak\",\"Hero Honda Achiever\",\"Bajaj Pulsar 150\",\"TVS Streak\",\"Bajaj Discover 100\",\"TVS Apache RTR 160\",\"Bajaj Discover 135\",\"Bajaj Xcd\",\"Honda Aviator\",\"Bajaj Pulsar 180\",\"Honda Activa\",\"Hero Honda Pleasure\",\"Hero Honda Splendor\",\"Hero Honda Passion Plus\",\"Bajaj Pulsar 180\",\"TVS Spectra\",\"Hero Honda Glamour\",\"Bajaj Xcd\",\"Hero Honda CD Deluxe\",\"Bajaj Discover 135\",\"Hero Passion Pro 110\",\"Royal Enfield Bullet 350\",\"Hero Passion Pro 110\",\"Bajaj Xcd\",\"Bajaj Boxer\",\"Royal Enfield Electra 4S\",\"Hero Honda Splendor Plus\",\"Bajaj Pulsar 180\",\"Bajaj Royal Enfield Electra 5S\",\"Bajaj Discover 150\",\"Bajaj Pulsar 150\",\"Bajaj Pulsar 180\",\"Hero Honda Passion Plus\",\"Bajaj Pulsar 150\",\"Bajaj Pulsar 150\",\"Yamaha FZ16\",\"Honda Aviator\",\"Royal Enfield Machismo\",\"Bajaj Xcd\",\"Hero Honda Super Splendor\",\"Hero Honda CD Deluxe\",\"Honda Shine\",\"Bajaj Xcd\",\"Bajaj Discover 135\",\"Hero Honda Splendor Plus\",\"Bajaj Platina 100\",\"Hero Honda Splendor Plus\",\"Hero Honda Passion Plus\",\"Bajaj Discover 135\",\"Bajaj Pulsar 180\",\"Hero Slendor Plus\",\"Hero Honda CBZ Extreme\",\"Bajaj Xcd\",\"Bajaj Pulsar 150\",\"Honda Activa\",\"Hero Super Splendor\",\"Bajaj Pulsar 150\",\"Hero Honda Splendor Plus\",\"Honda Hero Honda Splendor Plus\",\"Hero Honda Passion Plus\",\"Bajaj Pulsar 150\",\"Royal Enfield Bullet 350\",\"Bajaj Royal Enfield Electra 5S\",\"Bajaj Kristal\",\"Bajaj Pulsar 180\",\"Bajaj Discover 110\",\"Honda TVS Sport\",\"Hero Honda CBZ Extreme\",\"Hero Honda CB Unicorn 150\",\"Hero Honda Splendor Plus\",\"Hero Honda Glamour\",\"Hero Honda Splendor Plus\",\"Bajaj Pulsar 150\",\"Honda Activa\",\"Hero Honda Splendor\",\"Hero Slendor Plus\",\"TVS Apache\",\"Hero Honda Passion Plus\",\"Bajaj Royal Enfield Electra 5S\",\"Hero Honda Splendor Plus\",\"Bajaj Pulsar 150\",\"Bajaj Pulsar 150\",\"Honda Activa\",\"Hero Honda Passion Plus\",\"Hero Honda Glamour\",\"Hero Honda Splendor Plus\",\"TVS Star City\",\"Bajaj Discover 125\",\"Royal Enfield Thunderbird 350\",\"Hero Honda CD Deluxe\",\"Bajaj Pulsar 150\",\"Bajaj Pulsar 150\",\"Hero Honda Splendor Plus\",\"Hero CD Dawn\",\"TVS Victor\",\"Bajaj Pulsar 150\",\"Hero Honda CD Deluxe\",\"Royal Enfield Thunderbird 350\",\"TVS Centra\",\"Hero Honda Splendor Plus\",\"TVS Victor GLX\",\"Bajaj CT 100\",\"Hero Honda Splendor Plus\",\"Hero Honda Splendor Plus\",\"Hero Honda Passion Plus\",\"Hero Honda Passion Plus\",\"Bajaj Boxer\",\"TVS Victor\",\"Hero Honda Passion Plus\",\"Hero Honda Passion\",\"TVS Max DLX\",\"TVS Victor GLX\",\"Royal Enfield Bullet 350\",\"Hero Honda CD100\",\"Hero Honda CBZ\",\"Hero Honda Street Smart\",\"Bajaj Boxer\",\"Hero Honda Splendor\",\"Yamaha RX\",\"Hero Honda CD100\",\"TVS Excel\",\"Yamaha RX135\",\"Yamaha RX135\",\"Hero Honda CD100\",\"Yamaha RXG\",\"Hero Honda CD100SS\",\"Royal Enfield Bullet 350\",\"Royal Enfield Classic 350\",\"Bajaj Super\",\"Bajaj Super\",\"Royal Enfield Hunter 350\",\"Royal Enfield Classic 350\",\"Royal Enfield Meteor 350\",\"Royal Enfield Scram 411\"],\"y\":[111462,64020,65520,77200,81100,222386,168602,144979,143680,168979,139667,122854,103206,113459,110458,103731,88902,64820,59890,71966,55450,59925,73995,70205,66493,60130,71418,74118,72320,75320,74120,77120,70408,71728,72728,71728,86048,84000,81389,137805,79002,75002,70315,88536,81211,83198,79693,76025,75400,74400,72400,73317,68317,71317,67817,77378,81378,82486,205679,69216,65491,61152,65453,203808,203179,203179,86486,198179,147535,135274,120004,115614,103706,71066,88820,74066,77600,126778,124278,134242,122338,120498,117148,109900,118400,121400,128800,74966,138800,147800,147900,147700,147900,159100,157600,158700,159700,176300,177300,181300],\"type\":\"scatter\"},{\"line\":{\"color\":\"green\",\"width\":2},\"marker\":{\"color\":\"green\",\"size\":8},\"mode\":\"markers\",\"name\":\"Electric Scooter Price\",\"x\":[\"Okhi-90\",\"Praise Pro\",\"Ridge Plus\",\"R30\",\"Lite\",\"Dual\",\"iPraise+\",\"S1\",\"S1 Pro\",\"S1 Air\",\"Optima HX\",\"Photon HX\",\"Nymph HX\",\"Flash HX\",\"Max HX\",\"Zero HX\",\"Wave HX\",\"Faired\",\"E-SR\",\"E-SR Pro\",\"E-SR Pro Lithium\",\"Freedum\",\"Freedum Pro\",\"Magnus EX\",\"Zeal EX\",\"Primus EX\",\"Magnus Pro\",\"Zeal\",\"Primus\",\"Magnus\",\"450X\",\"450 Plus\",\"450X Gen 3\",\"RV 400\",\"RV 400 AI\",\"RV 300\",\"Chetak\",\"Chetak Premium\",\"Chetak Range+\",\"Eco\",\"Eco Dryft 350\",\"ePluto 7G\",\"ePluto 7G MAX\",\"eTryst 350\",\"Aura LI\",\"Falcon\",\"Kriti\",\"Aspiration LI\",\"Icon\",\"JMT1000HS\",\"JET 650 Passenger\",\"JET 250XL\",\"JET 650 Cargo\",\"JET 250XL+\",\"JMT1000\",\"JMT CLASSIC CITY\",\"JMT1000 3K\",\"iQube\",\"iQube S\",\"iQube ST\",\"NDS Leo\",\"NDS Altra\",\"NDS Elio\",\"NDS Aura\",\"NDS Cruz\",\"NDS Eco\",\"NDS Neo\",\"Avan Evolve E+\",\"Avan Evolve E Pro\",\"Avan Evolve Max\",\"Avan Evolve Max Pro\",\"Avan Evolve Pro\",\"Goreen Eco\",\"Goreen Alpha\",\"Goreen Beta\",\"Goreen Gamma\",\"Goreen Omega\",\"BGauss D15\",\"BGauss B8\",\"BGauss A2\",\"BGauss C5\",\"BGauss C10\",\"BGauss D15 Pro\",\"Spock\",\"IRA One\",\"IRA Edge\",\"IRA Pro\",\"IRA Max\",\"Civitas\",\"X1\",\"X1 Pro\",\"X1 Max\",\"SBTEK CiTRONev 1000 HS\",\"SBTEK CiTRONev JET 650 Passenger\",\"SBTEK CiTRONev JET 250XL\",\"SBTEK CiTRONev JET 650 Cargo\",\"Electra Infinity E1\",\"Electra Raptor E1\",\"Electra Cruze E1\",\"Electra Galaxy E1\",\"Super Eco SE1\",\"Super Eco T1 FX\",\"Super Eco S2\",\"Super Eco S2 (HS)\",\"Super Eco Vajra E Rickshaw\",\"Super Eco T4\",\"Super Eco E-Cart\",\"Super Eco SE1\",\"Super Eco T1 FX\",\"Super Eco S2\",\"Super Eco S2 (HS)\",\"Super Eco Vajra E Rickshaw\",\"Super Eco T4\",\"Super Eco E-Cart\",\"Atomix Alpha\",\"Atomix Beta\",\"Atomix Gamma\",\"Atomix Delta\",\"Yug 400 YO2\",\"Yugbike A Star\",\"Yugbike 60V 36ah Lithium Battery\",\"IGOR (Racer) 60V Electric Scooter Rto Approved in Rajasthan\",\"Yugbike Electric Scooter 60V Lead Acid Battery\",\"Trigger 1.0\",\"Trigger X\",\"Trigger Pro\",\"Trigger Max\",\"EONE\",\"ETWO\",\"ELMO\",\"Petrol Bike\",\"Zepop\",\"Rame\",\"Eleq\",\"Swirl\",\"Trono\",\"Vegatron\",\"TORK Kratos\",\"TORK T6X\",\"TORK T8X\",\"TORK KratosX\",\"TORK KratosR\"],\"y\":[\"70,000\",\"75,000\",\"85,000\",\"65,000\",\"60,000\",\"95,000\",\"90,000\",\"100000\",\"130000\",\"84,999\",\"70,000\",\"80,000\",\"65,000\",\"60,000\",\"90,000\",\"75,000\",\"60,000\",\"75,000\",\"65,000\",\"70,000\",\"80,000\",\"60,000\",\"65,000\",\"72,999\",\"79,999\",\"1,04,900\",\"75,000\",\"70,000\",\"1,00,000\",\"65,000\",\"160000\",\"150000\",\"1.69000\",\"130000\",\"143000\",\"115000\",\"150000\",\"160000\",\"175000\",\"60,000\",\"65,000\",\"79,999\",\"89,999\",\"69,999\",\"65,000\",\"70,000\",\"60,000\",\"65,000\",\"70,000\",\"89,000\",\"70,000\",\"65,000\",\"75,000\",\"97,224\",\"131,523\",\"89,000\",\"131,523\",\"123776\",\"134990\",\"149990\",\"1,19,000 \",\"1,05,000 \",\"95000\",\"1,30,000 \",\"1,15,000 \",\"85000\",\"1,20,000 \",\"85,000\",\"95,000\",\"1,20,000\",\"1,35,000\",\"1,05,000\",\"60,000\",\"70,000\",\"80,000\",\"90,000\",\"1,05,000\",\"96999\",\"79999\",\"59999\",\"89999\",\"1,12,999 \",\"1,09,999 \",\"65,000 \",\"75000\",\"65000\",\"70000\",\"80000\",\"94500\",\"74500\",\"84500\",\"94500\",\"89000\",\"70000\",\"65000\",\"75000\",\"69999\",\"89999\",\"79999\",\"99999\"],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"text\":\"Line Graph: Comparison of Motorcycle Scooter and Electric Scooter Prices\"},\"xaxis\":{\"title\":{\"text\":\"Scooter Models\"}},\"yaxis\":{\"title\":{\"text\":\"Ex-showroom Price\"}},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"white\"},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('fc0a1c78-021d-46d2-85a1-86b9ffdcca64');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}],"source":["def Graphica_representation():\n","  import pandas as pd\n","\n","  scooter_df=pd.read_excel('/content/drive/MyDrive/MINI/Dataset/Modified_company_name.xlsx')\n","  electric_df=pd.read_excel('/content/drive/MyDrive/MINI/Dataset/electric_price.xlsx')\n","  #print(scooter_df.head(2))\n","  #########################################################################################\n","  import plotly.graph_objects as go\n","\n","\n","  scooter_prices = scooter_df['ex_showroom_price'][:100]\n","  electric_prices = electric_df['Ex-showroom price'][:100]\n","\n","  fig = go.Figure()\n","\n","  fig.add_trace(go.Scatter(\n","      x=scooter_df['name'],\n","      y=scooter_prices,\n","      mode='markers',\n","      name='Motorcycle Scooter Price',\n","      line=dict(color='blue', width=2),\n","      marker=dict(color='blue', size=8)\n","  ))\n","\n","  fig.add_trace(go.Scatter(\n","      x=electric_df['Electric two-wheeler model'],\n","      y=electric_prices,\n","      mode='markers',\n","      name='Electric Scooter Price',\n","      line=dict(color='green', width=2),\n","      marker=dict(color='green', size=8)\n","  ))\n","\n","  layout = go.Layout(\n","      title='Line Graph: Comparison of Motorcycle Scooter and Electric Scooter Prices',\n","      xaxis=dict(title='Scooter Models'),\n","      yaxis=dict(title='Ex-showroom Price'),\n","      paper_bgcolor='white',\n","      plot_bgcolor='white'\n","  )\n","\n","  fig.update_layout(layout)\n","  fig.show()\n","Graphica_representation()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1AIBpdrlcMBR"},"outputs":[],"source":["def report_forecast():\n","  def annual_sales_report():\n","\n","      print(\"1. Sales Report of Petrol vehicles \")\n","      print(\"2. Sales Report of EV vehicles\")\n","\n","      user_input = input(\"Enter the number corresponding to your choice: \")\n","\n","      try:\n","        choice = int(user_input)\n","        categories = {\n","              1: \"Sales Report of Petrol vehicles\",\n","              2: \"Sales Report of EV vehicles\",\n","\n","          }\n","        if choice in categories:\n","          category = categories[choice]\n","          print(f\"You selected: {category}\")\n","          if category == 'Sales Report of Petrol vehicles':\n","            sales_report_petrol()\n","          elif category == 'Sales Report of EV vehicles':\n","            sales_report_ev()\n","        else:\n","          print(\"Invalid choice. Please enter a number between 1 and 2.\")\n","      except Exception as e:\n","        print(\"Invalid input. Please enter a number or 'exit'.\")\n","\n","\n","  def sales_forecasting():\n","\n","      print(\"1. SARIMAX \")\n","      print(\"2. Ensemble\")\n","      print(\"3. LSTM\")\n","      user_input = input(\"Enter the number corresponding to your choice: \")\n","\n","\n","      choice = int(user_input)\n","      categories = {\n","            1: \"SARIMAX\",\n","            2: \"Ensemble\",\n","            3: \"LSTM\",\n","          }\n","      if choice in categories:\n","        category = categories[choice]\n","        print()\n","        print(f\"You selected: {category}\")\n","        if category == 'SARIMAX':\n","          print()\n","          sarimax()\n","        elif category == 'Ensemble':\n","          print()\n","          ensemble()\n","        elif category == 'LSTM':\n","          print()\n","          LSTM()\n","      else:\n","        print(\"Invalid choice. Please enter a number between 1 and 2.\")\n","\n","\n","  while True:\n","    print(\"1. Annual Sales Report\")\n","    print(\"2. Sales Forecasting\")\n","    print(\"3. Exit\")\n","    print()\n","    user_input = input(\"Enter the number corresponding to your choice: \")\n","\n","    try:\n","      choice = int(user_input)\n","      categories = {\n","              1: \"Annual Sales Report\",\n","              2: \"Sales Forecasting\",\n","              3: \"exit\"\n","\n","          }\n","\n","      if choice in categories:\n","        category = categories[choice]\n","        print()\n","        print(f\"You selected: {category}\")\n","        print()\n","        if category == 'Annual Sales Report':\n","          print()\n","          annual_sales_report()\n","        elif category == 'Sales Forecasting':\n","          print()\n","          sales_forecasting()\n","        elif category == 'exit':\n","          break\n","      else:\n","        print(\"Invalid choice. Please enter a number between 1 and 2.\")\n","    except Exception as e:\n","      print(\"Invalid input. Please enter a number or 'exit'.\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"VSqTkYmYo-aE","outputId":"bdb828dc-658f-45c1-a468-e3bd69bc0b49","executionInfo":{"status":"ok","timestamp":1704599269263,"user_tz":-330,"elapsed":351557,"user":{"displayName":"shivaprasad shetty","userId":"09720553218955927212"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","\u001b[1;36m ML-DL Decision Support System for Vehicle Pricing and Sales Forecasting\u001b[0m\n","\n","\n","\u001b[1;32m 1. MotorCycle Imformation\u001b[0m\n","\u001b[1;32m 2. Electric Vehicle Imformation\u001b[0m\n","\u001b[1;32m 3. Sell/Buy Price Prediction\u001b[0m\n","\u001b[1;32m 4. Annual Sales/ Forecast\u001b[0m\n","\u001b[1;32m 5. Exit\u001b[0m\n","\n","Enter the number corresponding to your choice: 1\n","\n","You selected: MotorCycle Imformation\n","\n","\n","enter the company name: honda\n","Enter the category of your bike:\n","1. Commuter\n","2. Scooter\n","3. Sports bike\n","4. Naked bike\n","5. Scrambler\n","6. Street fighter\n","7. Cruiser\n","8. Dual sport\n","9. Touring Motorcycle\n","Enter the number corresponding to your choice: 1\n","You selected: Commuter\n","Enter the Bike name: shine\n","https://www.bikewale.com/honda-bikes/shine/\n","\n","Extracted Information:\n","\n","Displacement: 123.94 cc\n","Mileage - Owner Reported : 55 km\n","Riding Range : 577.5 km\n","Top Speed : 102 km\n","Fuel Tank Capacity : 10.5 ltr\n","Reserve Fuel Capacity : 1.3 ltr\n","\n","#########################################################################\n","Price Imformation :\n","\n","Shine Drum₹ 80,404Avg\n","\n","#########################################################################\n","Some News related to honda shine:\n","\n","url= https://www.rushlane.com/?s=honda%20shine\n","\n","Honda Shine 100 Vs Splendor Vs Platina – Best 100cc Motorcycle?\n","https://www.rushlane.com/honda-shine-100-vs-splendor-vs-platina-best-100cc-motorcycle-12468762.html\n","Honda Shine 100cc Production Starts – First Batch Dispatched To Dealers\n","https://www.rushlane.com/honda-shine-100cc-production-starts-first-batch-dispatch-12464442.html\n","Honda Shine 100 Specs Leak – Less Power Than Splendor Plus\n","https://www.rushlane.com/honda-shine-100-specs-leak-less-power-than-splendor-plus-12467900.html\n","Honda Shine 100cc Launch Price Rs 65k – Cheaper Than Hero Splendor\n","https://www.rushlane.com/honda-shine-100cc-launch-price-rs-65k-hero-splendor-rival-12462144.html\n","New Honda Shine Celebration Edition Launch Price Rs 79k – Golden Theme\n","https://www.rushlane.com/new-honda-shine-celebration-edition-launch-price-12447536.html\n","Honda Shine BS6 launch price Rs 67,857 – Gets new 5-speed gearbox\n","https://www.rushlane.com/honda-shine-bs6-launch-price-12354339.html\n","Honda Shine SP launch Price INR 59,900 [Update]\n","https://www.rushlane.com/honda-cb-shine-sp-launch-price-photos-specs-features-brochure-12174146.html\n","Honda 2W Sales Breakup November 2023 Domestic, Exports – Activa, Shine, Dio\n","https://www.rushlane.com/honda-2w-sales-breakup-november-2023-domestic-exports-activa-shine-dio-12484273.html\n","Honda 2W Sales Nov 2023 – Activa, CB350, Unicorn, Shine, Dio\n","https://www.rushlane.com/honda-2w-sales-nov-2023-activa-cb350-unicorn-shine-dio-12483056.html\n","Honda 2W Sales Breakup October 2023 – Activa, CB Shine, Dio, Navi\n","https://www.rushlane.com/honda-2w-sales-breakup-october-2023-activa-cb-shine-dio-navi-12482771.html\n","#######################################################################\n","\n","Recommendations For You\n","\n","Similar vehicle to Honda Shine  :\n","                        title  ratings\n","0                Honda Shine      4.1\n","1       Honda CB Unicorn 150      4.1\n","2  Honda Hero Super Splendor      3.9\n","3           Hero Glamour 125      4.1\n","4         Bajaj Discover 100      3.0\n","\n","\u001b[1;36m ML-DL Decision Support System for Vehicle Pricing and Sales Forecasting\u001b[0m\n","\n","\n","\u001b[1;32m 1. MotorCycle Imformation\u001b[0m\n","\u001b[1;32m 2. Electric Vehicle Imformation\u001b[0m\n","\u001b[1;32m 3. Sell/Buy Price Prediction\u001b[0m\n","\u001b[1;32m 4. Annual Sales/ Forecast\u001b[0m\n","\u001b[1;32m 5. Exit\u001b[0m\n","\n","Enter the number corresponding to your choice: 2\n","\n","You selected: Electric Vehicle Imformation\n","\n","\n","Enter the company name:bajaj\n","\n","Enter the vehicle name:chetak\n","\n","\n","https://www.bikewale.com/bajaj-bikes/chetak/\n","Extracted Information:\n","\n","High lights of \n","Riding Range : 126 km\n","Top Speed : 73 kmph\n","Battery Charging Time: 4.30 Hrs\n","Rated Power : 4000 W\n","['VariantPriceSpecificationsChetak Premium [2024]₹ 1,38,380Avg. Ex-Showroom126 Km, 73 KmphGet OffersChetak Urbane Standard [2024]₹ 1,40,781Avg. Ex-Showroom113 Km, 63 KmphGet OffersChetak Urbane TecPac [2024]₹ 1,44,121Avg. Ex-Showroom113 Km, 73 KmphGet OffersChetak Premium TecPac [2024]₹ 1,44,463Avg. Ex-Showroom126 Km, 73 KmphGet OffersChetak Premium Edition [2023]₹ 1,48,921108 Km, 63 Kmph']\n","\n","Price Imformation :\n","\n","Chetak Premium [2024]₹ 1,38,380Avg\n","#########################################################################\n","\n","url= https://www.rushlane.com/?s=bajaj+chetak\n","\n","2024 Bajaj Chetak Electric Scooter Launch Price Rs 1.15 L – Range 127 Kms\n","https://www.rushlane.com/2024-bajaj-chetak-electric-scooter-launch-price-rs-1-15-l-range-127-kms-12485406.html\n","2024 Bajaj Chetak Premium Spied At Dealer – More Range, TFT Dash\n","https://www.rushlane.com/2024-bajaj-chetak-premium-spied-at-dealer-more-range-tft-dash-12484923.html\n","Bajaj Chetak To Get Updates – Higher Range, New Features\n","https://www.rushlane.com/bajaj-chetak-to-get-updates-higher-range-new-features-12482976.html\n","Bajaj Chetak Hub Motor Spied Testing – Base Trim Resurrected?\n","https://www.rushlane.com/bajaj-chetak-hub-motor-spied-testing-base-trim-reserructed-12479674.html\n","Bajaj Chetak Electric Scooter Price Cut By Rs 22k – Base Variant Discontinued\n","https://www.rushlane.com/bajaj-chetak-electric-scooter-price-cut-by-rs-22k-12476781.html\n","Yulu Wynn Electric 2W Launch Price Rs 55k – Made By Bajaj Chetak\n","https://www.rushlane.com/yulu-wynn-electric-2w-launch-price-rs-55k-bajaj-chetak-12468210.html\n","2023 Bajaj Chetak Electric Scooter Launch Soon – 18 Km More Range\n","https://www.rushlane.com/2023-bajaj-chetak-electric-scooter-launch-soon-12460996.html\n","Bajaj Chetak Electric Scooter Europe Launch Plans – 30k Sold In 2022\n","https://www.rushlane.com/bajaj-chetak-electric-scooter-sales-2022-europe-plans-12458604.html\n","Hero Vida Electric Scooter Vs TVS iQube, Bajaj Chetak, Ola, Ather\n","https://www.rushlane.com/hero-vida-electric-scooter-vs-tvs-iqube-bajaj-chetak-ola-ather-12451144.html\n","1993 Bajaj Chetak Scooter Restored To Full Glory – Old Vs Modified\n","https://www.rushlane.com/1993-bajaj-chetak-scooter-restored-to-full-glory-old-vs-modified-12441252.html\n","#########################################################################\n","\n","Recommendation For You \n","\n","Similar scooters to Chetak  :\n","       title                Company Ex-showroom price  Ratings\n","0    Chetak         BAJAJ AUTO LTD            150000      4.0\n","1  iQube ST  TVS MOTOR COMPANY LTD            149990      4.8\n","2   IRA Pro    IRA EDUTECH PVT LTD             70000      4.1\n","3  TORK T6X    TORK MOTORS PVT LTD          1,39,000      4.2\n","4  TORK T8X    TORK MOTORS PVT LTD          1,59,000      4.1\n","\n","\u001b[1;36m ML-DL Decision Support System for Vehicle Pricing and Sales Forecasting\u001b[0m\n","\n","\n","\u001b[1;32m 1. MotorCycle Imformation\u001b[0m\n","\u001b[1;32m 2. Electric Vehicle Imformation\u001b[0m\n","\u001b[1;32m 3. Sell/Buy Price Prediction\u001b[0m\n","\u001b[1;32m 4. Annual Sales/ Forecast\u001b[0m\n","\u001b[1;32m 5. Exit\u001b[0m\n","\n","Enter the number corresponding to your choice: 3\n","\n","You selected: Sell/Buy Price Prediction\n","\n","\n","Enter the Company name: bajaj\n","Enter the Bike Name: pulsar 150\n","enter the model year: 2016\n","Enter how much  total Kilo meter travelled:89765\n","\n","url= https://www.bikewale.com/bajaj-bikes/pulsar-150/\n","The suggested selling price for bajaj pulsar 150 is: \n","Maximum price is :50925\n","Minimum price is :29900\n","\n","Would you like to confirm the proposed selling price?  (Type 'y' for yes or 'n' for no) y\n","\n","2016 bajaj pulsar 150 Second hand price\n","\n","https://www.olx.in/motorcycles_c81/q-pulsar-150-2016\n","https://droom.in/bikes/used/bajaj-pulsar-2016\n","\n","\n","Would you like to view the prediction report? (Type 'y' for yes or 'n' for no)y\n","\n","Analysis of Prediction Results using Different Regression Techniques\n","\n","                    Model  Predicted_price\n","0   RandomForestRegressor            41221\n","1  SupportVectorRegressor            49983\n","2        LinearRegression            50925\n","3   DecisionTreeRegressor            29900\n","4            XGBRegressor            43509\n","5        Voting_regressor            42241\n","\n","Data Visualization: Results in Graphs:\n","\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"e5a9cfd5-e9ab-4873-96a6-961bb0c46bf7\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"e5a9cfd5-e9ab-4873-96a6-961bb0c46bf7\")) {                    Plotly.newPlot(                        \"e5a9cfd5-e9ab-4873-96a6-961bb0c46bf7\",                        [{\"marker\":{\"color\":\"orange\"},\"x\":[\"RandomForestRegressor\",\"SupportVectorRegressor\",\"LinearRegression\",\"DecisionTreeRegressor\",\"XGBRegressor\",\"Voting_regressor\"],\"y\":[41221,49983,50925,29900,43509,42241],\"type\":\"bar\",\"width\":0.1}],                        {\"paper_bgcolor\":\"black\",\"plot_bgcolor\":\"black\",\"title\":{\"font\":{\"color\":\"green\"},\"text\":\"Ensemble Model Result\"},\"xaxis\":{\"color\":\"white\",\"title\":{\"text\":\"Model_name\"}},\"yaxis\":{\"color\":\"white\",\"title\":{\"text\":\"Predicted_Price\"}},\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('e5a9cfd5-e9ab-4873-96a6-961bb0c46bf7');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\u001b[1;36m ML-DL Decision Support System for Vehicle Pricing and Sales Forecasting\u001b[0m\n","\n","\n","\u001b[1;32m 1. MotorCycle Imformation\u001b[0m\n","\u001b[1;32m 2. Electric Vehicle Imformation\u001b[0m\n","\u001b[1;32m 3. Sell/Buy Price Prediction\u001b[0m\n","\u001b[1;32m 4. Annual Sales/ Forecast\u001b[0m\n","\u001b[1;32m 5. Exit\u001b[0m\n","\n","Enter the number corresponding to your choice: 4\n","\n","You selected: Annual Sales/ Forecast\n","\n","1. Annual Sales Report\n","2. Sales Forecasting\n","3. Exit\n","\n","Enter the number corresponding to your choice: 2\n","\n","You selected: Sales Forecasting\n","\n","\n","1. SARIMAX \n","2. Ensemble\n","3. LSTM\n","Enter the number corresponding to your choice: 1\n","\n","You selected: SARIMAX\n","\n","Which company's sales report are you interested in?\n","Bajaj, Hero, Honda, Jawa, KTM, Kawasaki, Mahindra, Piaggio, Royal Enfield, Suzuki, TVS, Yamaha : Honda\n","\n","Enter the Forecast Steps(<5): 3\n","\n","\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"19aaca54-7fb3-42b2-8461-dc94014a4f47\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"19aaca54-7fb3-42b2-8461-dc94014a4f47\")) {                    Plotly.newPlot(                        \"19aaca54-7fb3-42b2-8461-dc94014a4f47\",                        [{\"marker\":{\"color\":\"orange\"},\"name\":\"Actual\",\"x\":[\"2010-01-01T00:00:00\",\"2011-01-01T00:00:00\",\"2012-01-01T00:00:00\",\"2013-01-01T00:00:00\",\"2014-01-01T00:00:00\",\"2015-01-01T00:00:00\",\"2016-01-01T00:00:00\",\"2017-01-01T00:00:00\",\"2018-01-01T00:00:00\",\"2019-01-01T00:00:00\",\"2020-01-01T00:00:00\",\"2021-01-01T00:00:00\",\"2022-01-01T00:00:00\"],\"y\":[2942000.0,3132000.0,3358000.0,3537000.0,3742000.0,3932000.0,4058000.0,4197000.0,4208000.0,4398000.0,4132000.0],\"type\":\"bar\"},{\"marker\":{\"color\":\"green\"},\"name\":\"Predicted\",\"x\":[\"2021-01-01T00:00:00\",\"2022-01-01T00:00:00\"],\"y\":[3866000,4226400],\"type\":\"bar\"},{\"marker\":{\"color\":\"blue\"},\"name\":\"Forecast\",\"x\":[\"2023-01-01T00:00:00\",\"2024-01-01T00:00:00\",\"2025-01-01T00:00:00\"],\"y\":[3866000.0,4226400.588399874,3524000.626399961],\"type\":\"bar\"}],                        {\"paper_bgcolor\":\"black\",\"plot_bgcolor\":\"black\",\"showlegend\":true,\"xaxis\":{\"title\":{\"text\":\"Year\"}},\"yaxis\":{\"title\":{\"text\":\"Sales\"}},\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('19aaca54-7fb3-42b2-8461-dc94014a4f47');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["1. Annual Sales Report\n","2. Sales Forecasting\n","3. Exit\n","\n","Enter the number corresponding to your choice: 2\n","\n","You selected: Sales Forecasting\n","\n","\n","1. SARIMAX \n","2. Ensemble\n","3. LSTM\n","Enter the number corresponding to your choice: 3\n","\n","You selected: LSTM\n","\n","Which company's sales report are you interested in?\n","Bajaj, Hero, Honda, Jawa, Kawasaki, Mahindra, Piaggio, Royal Enfield, Suzuki, TVS, Yamaha : Honda\n","\n"," Enter the Forecast Steps(<5)3\n","\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"c21a4831-bec3-470c-b3f8-63417fdf8fbe\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"c21a4831-bec3-470c-b3f8-63417fdf8fbe\")) {                    Plotly.newPlot(                        \"c21a4831-bec3-470c-b3f8-63417fdf8fbe\",                        [{\"marker\":{\"color\":\"orange\"},\"name\":\"Actual\",\"x\":[2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"y\":[2942000,3132000,3358000,3537000,3742000,3932000,4058000,4197000,4208000,4398000,4132000,4430000,4350943],\"type\":\"bar\"},{\"marker\":{\"color\":\"green\"},\"name\":\"Predicted\",\"x\":[2021,2022],\"y\":[4330000.0,4250943.0],\"type\":\"bar\"},{\"marker\":{\"color\":\"blue\"},\"name\":\"Forecast\",\"x\":[2023.0,2024.0,2025.0],\"y\":[4390828.0,4391108.5,4391392.0],\"type\":\"bar\"}],                        {\"paper_bgcolor\":\"black\",\"plot_bgcolor\":\"black\",\"showlegend\":true,\"title\":{\"text\":\"Predicted Prices Over Years\"},\"xaxis\":{\"title\":{\"text\":\"Year\"}},\"yaxis\":{\"title\":{\"text\":\"Sales\"}},\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('c21a4831-bec3-470c-b3f8-63417fdf8fbe');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["1. Annual Sales Report\n","2. Sales Forecasting\n","3. Exit\n","\n","Enter the number corresponding to your choice: 1\n","\n","You selected: Annual Sales Report\n","\n","\n","1. Sales Report of Petrol vehicles \n","2. Sales Report of EV vehicles\n","Enter the number corresponding to your choice: 1\n","You selected: Sales Report of Petrol vehicles\n","Which company's sales report are you interested in?\n","Bajaj, Hero, Honda, Jawa, KTM, Kawasaki, Mahindra, Piaggio, Royal Enfield, Suzuki, TVS, Yamaha : Honda\n","\n","\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"838c4ad0-dd7c-4b9d-8a7e-3d6da5afc0de\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"838c4ad0-dd7c-4b9d-8a7e-3d6da5afc0de\")) {                    Plotly.newPlot(                        \"838c4ad0-dd7c-4b9d-8a7e-3d6da5afc0de\",                        [{\"line\":{\"color\":\"orange\"},\"mode\":\"lines\",\"x\":[\"2022-01-01T00:00:00\",\"2021-01-01T00:00:00\",\"2020-01-01T00:00:00\",\"2019-01-01T00:00:00\",\"2018-01-01T00:00:00\",\"2017-01-01T00:00:00\",\"2016-01-01T00:00:00\",\"2015-01-01T00:00:00\",\"2014-01-01T00:00:00\",\"2013-01-01T00:00:00\",\"2012-01-01T00:00:00\",\"2011-01-01T00:00:00\",\"2010-01-01T00:00:00\"],\"y\":[4350943,4430000,4132000,4398000,4208000,4197000,4058000,3932000,3742000,3537000,3358000,3132000,2942000],\"type\":\"scatter\"}],                        {\"paper_bgcolor\":\"black\",\"plot_bgcolor\":\"black\",\"title\":{\"text\":\"Honda Sales Report of past 10 years\"},\"xaxis\":{\"title\":{\"text\":\"year\"}},\"yaxis\":{\"title\":{\"text\":\"sales\"}},\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('838c4ad0-dd7c-4b9d-8a7e-3d6da5afc0de');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["1. Annual Sales Report\n","2. Sales Forecasting\n","3. Exit\n","\n","Enter the number corresponding to your choice: 3\n","\n","You selected: exit\n","\n","\n","\u001b[1;36m ML-DL Decision Support System for Vehicle Pricing and Sales Forecasting\u001b[0m\n","\n","\n","\u001b[1;32m 1. MotorCycle Imformation\u001b[0m\n","\u001b[1;32m 2. Electric Vehicle Imformation\u001b[0m\n","\u001b[1;32m 3. Sell/Buy Price Prediction\u001b[0m\n","\u001b[1;32m 4. Annual Sales/ Forecast\u001b[0m\n","\u001b[1;32m 5. Exit\u001b[0m\n","\n","Enter the number corresponding to your choice: 5\n","\n","You selected: exit\n","\n","Appreciate your time! Wishing you a great day!\n"]}],"source":["\n","\n","while True:\n","  print()\n","  print(\"\\033[1;36m ML-DL Decision Support System for Vehicle Pricing and Sales Forecasting\\033[0m\")\n","  print()\n","  print()\n","  print(\"\\033[1;32m 1. MotorCycle Imformation\\033[0m\")\n","  print(\"\\033[1;32m 2. Electric Vehicle Imformation\\033[0m\")\n","  print(\"\\033[1;32m 3. Sell/Buy Price Prediction\\033[0m\")\n","  print(\"\\033[1;32m 4. Annual Sales/ Forecast\\033[0m\")\n","  print(\"\\033[1;32m 5. Exit\\033[0m\")\n","\n","  print()\n","  user_input = input(\"Enter the number corresponding to your choice: \")\n","\n","  try:\n","    choice = int(user_input)\n","    categories = {\n","              1: \"MotorCycle Imformation\",\n","              2: \"Electric Vehicle Imformation\",\n","              3: \"Sell/Buy Price Prediction\",\n","              4: \"Annual Sales/ Forecast\",\n","              5: \"exit\",\n","\n","          }\n","\n","    if choice in categories:\n","      category = categories[choice]\n","      print()\n","      print(f\"You selected: {category}\")\n","      print()\n","      if category == 'MotorCycle Imformation':\n","        print()\n","        bike_imformation()\n","      elif category == 'Electric Vehicle Imformation':\n","          print()\n","          ev_imformation()\n","      elif category == 'Sell/Buy Price Prediction':\n","        print()\n","        Final_code()\n","      elif category =='Annual Sales/ Forecast':\n","        report_forecast()\n","      elif category =='exit':\n","        print(\"Appreciate your time! Wishing you a great day!\")\n","        break\n","      else:\n","        print(\"Invalid choice. Please enter a number between 1 and 2.\")\n","  except Exception as e:\n","      print(\"Invalid input. Please enter a number or 'exit'.\")"]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[],"mount_file_id":"114-Oc1M1epH0iu2104iXQ-RIAQ7p468Q","authorship_tag":"ABX9TyPzU5ouSC3x9bTPSzyMqr48"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}